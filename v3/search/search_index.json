{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contribute/mrl/","title":"Contribute to the MRL SDK","text":""},{"location":"contribute/mrl/#get-started","title":"Get Started","text":"<p>To contribute to the MRL SDK, you'll first need to fork the GitHub repository, and then clone the repository to your local machine.</p> <pre><code>git clone https://github.com/YOUR_GITHUB_USERNAME/xcm-sdk.git\n</code></pre> <p>Then, install dependencies:</p> <pre><code>npm install\n</code></pre>"},{"location":"contribute/mrl/#add-an-asset","title":"Add an Asset","text":"<p>Follow the steps outlined in the Add an Asset section of the XCM SDK documentation. The process is the same for this step</p>"},{"location":"contribute/mrl/#add-a-chain","title":"Add a Chain","text":"<p>The next step to support an asset integration is to add chain information for the chains in which your asset can be sent to and from to the chains configuration file.</p> <p>To add a chain, take the following steps:</p> <ol> <li>Open the <code>xcm-sdk/packages/config/src/chains.ts</code> file</li> <li>Add your asset to the list of imported assets from the assets configuration file (<code>./assets.ts</code>)</li> <li> <p>Create a new variable for each chain if an entry doesn't already exist. You'll need to create a Chain Object, providing metadata related to the chain</p> ParachainEVM ParachainEVM Chain <pre><code>new Parachain({\n  assetsData: [], // Optional - In the next step, you'll add assets here\n  ecosystem: Ecosystem.INSERT_ECOSYSTEM_TYPE, // Optional\n  genesisHash: 'INSERT_GENESIS_HASH',\n  isTestChain: INSERT_BOOLEAN, // Optional\n  key: 'INSERT_KEY',\n  name: 'INSERT_NAME',\n  nativeAsset: INSERT_NATIVE_ASSET, // from the assets.ts file\n  parachainId: INSERT_PARACHAIN_ID,\n  ss58Format: INSERT_SS58_FORMAT,\n  ws: ['INSERT_WSS_ENDPOINTS'],\n});\n</code></pre> <pre><code>new EvmParachain({\n  assetsData: [], // Optional - In the next step, you'll add assets here\n  ecosystem: Ecosystem.INSERT_ECOSYSTEM_TYPE, // Optional\n  genesisHash: 'INSERT_GENESIS_HASH',\n  id: INSERT_EVM_CHAIN_ID,\n  isTestChain: INSERT_BOOLEAN, // Optional\n  key: 'INSERT_KEY',\n  name: 'INSERT_NAME',\n  nativeAsset: INSERT_NATIVE_ASSET, // from the assets.ts file\n  parachainId: INSERT_PARACHAIN_ID,\n  ss58Format: INSERT_SS58_FORMAT,\n  rpc: 'INSERT_RPC_ENDPOINT',\n  ws: ['INSERT_WSS_ENDPOINTS'],\n});\n</code></pre> <pre><code>new EvmChain({\n  assetsData: [], // Optional - In the next step, you'll add assets here\n  ecosystem: Ecosystem.INSERT_ECOSYSTEM_TYPE, // Optional\n  id: INSERT_EVM_CHAIN_ID,\n  isTestChain: INSERT_BOOLEAN, // Optional\n  key: 'INSERT_KEY',\n  name: 'INSERT_NAME',\n  nativeAsset: INSERT_NATIVE_ASSET, // from the assets.ts file\n  rpc: 'INSERT_RPC_ENDPOINT',\n  wh: {\n    name: 'INSERT_WORMHOLE_NAME',\n  }, // Optional - if using Wormhole for MRL\n});\n</code></pre> <p>For example, this is the configuration for adding the Ethereum chain:</p> <pre><code>export const ethereum = new EvmChain({\n  assets: [],\n  ecosystem: Ecosystem.Polkadot,\n  explorer: 'https://etherscan.io',\n  id: 1,\n  key: 'ethereum',\n  name: 'Ethereum',\n  nativeAsset: eth,\n  rpc: 'https://ethereum-rpc.publicnode.com',\n  wh: {\n    name: 'Ethereum',\n  },\n});\n</code></pre> </li> <li> <p>Add the newly created chain to the <code>chainsList</code> array at the end of the file</p> </li> </ol> <p>Note</p> <p>Chains are listed in alphabetical order. Please make sure you follow this order when adding new chains.</p>"},{"location":"contribute/mrl/#configure-a-chains-assets","title":"Configure a Chain's Assets","text":"<p>Similar to the XCM SDK, you'll need to configure the source and destination chains of an asset. </p> <p>Here are the steps to configure the source and destination chains of an asset, specifically for an MRL route.</p> <ol> <li> <p>In the <code>assetsData</code> array of the source chain, you'll need to create a Chain Asset Object for the asset, specifying how the asset is seen on that chain.</p> <p>For example, this is the configuration for USDT on Ethereum:</p> <pre><code>export const ethereum = new EvmChain({\n  ...\n  assetsData: [\n    ...\n    ChainAsset.fromAsset(usdt, {\n      address: '0xdac17f958d2ee523a2206206994597c13d831ec7', // address of the asset on Ethereum\n      decimals: 6,\n    }),\n    ...\n  ],\n  ...\n});\n</code></pre> </li> <li> <p>In the destination chain's <code>assetsData</code> array, create a Chain Asset Object that defines the asset as seen on the destination chain. This will be different than the source chain's configurations, as every chain manages assets differently</p> <p>For example, to add support for USDT on Moonbeam, Moonbeam's chain configuration needs to include the configuration for USDT:</p> <pre><code>export const moonbeam = new EvmParachain({\n  assetsData: [\n      ...\n      ChainAsset.fromAsset(usdtwh, {\n      address: '0xc30E9cA94CF52f3Bf5692aaCF81353a27052c46f', // address of the asset on Moonbeam\n      decimals: 6,\n      ids: {\n        palletInstance: 110, // index of the Assets pallet, used for the MRL integration\n      },\n    }),\n      ...\n  ]\n  ...\n});\n</code></pre> </li> </ol> <p>Note</p> <p>Note that the asset we're using is different in each chain, <code>usdt</code> in Ethereum and <code>usdtwh</code> in Moonbeam. This is because the symbol of the asset is different on each chain, in this case because USDT.wh is a representation of USDT on Wormhole. You'll need to determine which representation of the asset you're using on each chain.</p>"},{"location":"contribute/mrl/#configure-a-chain-route","title":"Configure a Chain Route","text":""},{"location":"contribute/mrl/#prerequisites","title":"Prerequisites","text":"<p>These steps are the same as the XCM SDK, but you'll need to create the builders for the MRL routes as well. So you'll need to know which pallet, method and provider you're using for the MRL routes. Also, you'll need to know the type of transfer you're using, as the builders will be different depending on the type of transfer.</p>"},{"location":"contribute/mrl/#creating-the-routes-in-the-configuration-files","title":"Creating the routes in the configuration files","text":"<p>Assuming that all of the required pallets and methods are already supported, you can create the configuration file for the source chain:  </p> <ol> <li>In the <code>xcm-sdk/packages/config/src/mrl-configs</code> directory, add a TypeScript file for the new chain. If the chain already has a configuration file, you can update it instead adding the new routes, go to step 3.</li> <li> <p>Use the following snippet as a starting point for adding the chain routes:</p> <pre><code>import { INSERT_REQUIRED_BUILDERS } from '@moonbeam-network/xcm-builder';\nimport { INSERT_REQUIRED_ASSETS } from '../assets';\nimport { INSERT_SOURCE_CHAIN, INSERT_DESTINATION_CHAIN, INSERT_MOON_CHAIN } from '../chains';\nimport { MrlChainRoutes } from '../types/MrlChainRoutes';\n\n// The chain config name should be formatted as: 'chainName' + 'Routes'\nexport const INSERT_CHAIN_CONFIG_NAME = new MrlChainRoutes({\n  chain: INSERT_SOURCE_CHAIN, // The source chain\n  routes: [], // In the next step, you'll add routes here\n});\n</code></pre> </li> <li> <p>As seen in the above example, a <code>routes</code> array contains the chain's routes. The route configuration defines the asset being transferred, the destination chain, the moonchain, information associated with fees, and the builder functions. The builder functions must be used to build the queries or calls as if they were being executed from this chain. </p> <p>You'll need to create a Route for each asset, for example:</p> <pre><code> {\n  source: {\n    asset: INSERT_ASSET,\n    balance: INSERT_BALANCE_BUILDER,\n    destinationFee: {\n      asset: INSERT_DESTINATION_FEE_ASSET,\n      balance: INSERT_DESTINATION_FEE_BALANCE_BUILDER,\n    },\n  },\n  destination: {\n    asset: INSERT_ASSET,\n    chain: INSERT_DESTINATION_CHAIN,\n    balance: INSERT_BALANCE_BUILDER,\n    fee: {\n      asset: INSERT_DESTINATION_FEE_ASSET,\n      amount: INSERT_FEE_AMOUNT,\n    },\n  },\n  mrl: {\n    isAutomaticPossible: INSERT_IS_AUTOMATIC_POSSIBLE,\n    transfer: INSERT_MRL_BUILDER,\n    moonChain: {\n      asset: INSERT_ASSET_IN_MOON_CHAIN,\n      balance: INSERT_BALANCE_BUILDER,\n      fee: {\n        asset: INSERT_FEE_ASSET_MOON_CHAIN,\n        amount: INSERT_FEE_AMOUNT,\n        balance: INSERT_FEE_BALANCE_BUILDER,\n      },\n    },\n  },\n},\n</code></pre> </li> <li> <p>Add the newly created chain configurations to the <code>mrlRoutesList</code> in the <code>xcm-sdk/blob/main/packages/config/src/mrl-configs/index.ts</code> file</p> </li> </ol> <p>Note</p> <p>Chain configurations are listed in alphabetical order. Please follow this order when adding new chain configurations.</p> <p>For example, to add support to transfer USDT from Ethereum to Hydration, and ETH from Ethereum to Moonbeam, the Ethereum configuration file is as follows:</p> <pre><code>import { BalanceBuilder, MrlBuilder } from '@moonbeam-network/xcm-builder';\nimport { eth, glmr, usdt, usdtwh, weth } from '../assets';\nimport { ethereum, hydration, moonbeam } from '../chains';\nimport { MrlChainRoutes } from '../types/MrlChainRoutes';\n\nexport const ethereumRoutes = new MrlChainRoutes({\n  chain: ethereum,\n  routes: [\n    /**\n     * Destination Hydration\n     */\n    {\n      source: {\n        asset: usdt,\n        balance: BalanceBuilder().evm().erc20(),\n        destinationFee: {\n          asset: usdt,\n          balance: BalanceBuilder().evm().erc20(),\n        },\n      },\n      destination: {\n        asset: usdtwh,\n        chain: hydration,\n        balance: BalanceBuilder().substrate().tokens().accounts(),\n        fee: {\n          asset: usdtwh,\n          amount: 0.004,\n        },\n      },\n      mrl: {\n        isAutomaticPossible: false,\n        transfer: MrlBuilder().wormhole().wormhole().tokenTransfer(),\n        moonChain: {\n          asset: usdtwh,\n          balance: BalanceBuilder().evm().erc20(),\n          fee: {\n            asset: glmr,\n            amount: 0.15,\n            balance: BalanceBuilder().substrate().system().account(),\n          },\n        },\n      },\n    },\n    /**\n     * Destination Moonbeam\n     */\n    {\n      source: {\n        asset: eth,\n        balance: BalanceBuilder().evm().native(),\n        destinationFee: {\n          asset: eth,\n          balance: BalanceBuilder().evm().native(),\n        },\n      },\n      destination: {\n        asset: weth,\n        chain: moonbeam,\n        balance: BalanceBuilder().evm().erc20(),\n        fee: {\n          asset: weth,\n          amount: 0,\n        },\n      },\n      mrl: {\n        isAutomaticPossible: true,\n        transfer: MrlBuilder().wormhole().wormhole().tokenTransfer(),\n        moonChain: {\n          asset: weth,\n          balance: BalanceBuilder().evm().erc20(),\n          fee: {\n            asset: glmr,\n            amount: 0.15,\n            balance: BalanceBuilder().substrate().system().account(),\n          },\n        },\n      },\n    },\n  ],\n});\n</code></pre> <p>With this configuration, you can send the asset one-way from the configured chain to the asset's specified destination chain. To send the asset back to the original source chain, you must update (or create) the specified destination chain's configurations. Considering the above example, the Hydration configuration file would need to be updated to transfer USDT from Hydration back to Ethereum.</p> <p>You must take the same steps in the destination chain's configuration file. If a configuration file does not exist, you must create one. Otherwise, update the chain's configuration file to include the asset route, as step three outlines.</p> <p>For example, enabling USDT transfers from Hydration back to Ethereum requires the following Hydration chain configuration:</p> <pre><code>import { BalanceBuilder, MrlBuilder } from '@moonbeam-network/xcm-builder';\nimport { glmr, hdx, usdt, usdtwh } from '../assets';\nimport { ethereum, hydration } from '../chains';\nimport { MrlChainRoutes } from '../types/MrlChainRoutes';\n\nexport const hydrationRoutes = new MrlChainRoutes({\n  chain: hydration,\n  routes: [\n    {\n      source: {\n        asset: usdtwh,\n        balance: BalanceBuilder().substrate().tokens().accounts(),\n        destinationFee: {\n          asset: usdtwh,\n          balance: BalanceBuilder().substrate().tokens().accounts(),\n        },\n        moonChainFee: {\n          asset: glmr,\n          balance: BalanceBuilder().substrate().tokens().accounts(),\n        },\n        fee: {\n          asset: hdx,\n          balance: BalanceBuilder().substrate().system().account(),\n        },\n      },\n      destination: {\n        asset: usdt,\n        chain: ethereum,\n        balance: BalanceBuilder().evm().erc20(),\n        fee: {\n          asset: usdt,\n          amount: 0,\n        },\n      },\n      mrl: {\n        isAutomaticPossible: true,\n        transfer: MrlBuilder().wormhole().extrinsic().polkadotXcm().send(),\n        moonChain: {\n          asset: usdtwh,\n          balance: BalanceBuilder().evm().erc20(),\n          fee: {\n            asset: glmr,\n            amount: 0.1,\n            balance: BalanceBuilder().substrate().system().account(),\n          },\n        },\n      },\n    },\n  ],\n});\n</code></pre> <p>And that's it! You now know how to add new assets and chains and configure the chains that an asset can be sent to and from. To ensure that you've properly set everything up, read on to the next section.</p>"},{"location":"contribute/xcm/","title":"Contribute to the XCM SDK","text":""},{"location":"contribute/xcm/#get-started","title":"Get Started","text":"<p>To contribute to the XCM SDK, you'll first need to fork the GitHub repository, and then clone the repository to your local machine.</p> <pre><code>git clone https://github.com/YOUR_GITHUB_USERNAME/xcm-sdk.git\n</code></pre> <p>Then, install dependencies:</p> <pre><code>npm install\n</code></pre>"},{"location":"contribute/xcm/#add-an-asset","title":"Add an Asset","text":"<p>The first step in adding support for a new asset is to define the asset in the assets configuration file. At this stage, assets are not bound to any chain, you are only creating a representation of the asset.</p> <p>Follow these steps:</p> <ol> <li>Open the <code>xcm-sdk/packages/config/src/assets.ts</code> file</li> <li>Create a new variable for your asset. You'll need to create an Asset Object, providing the <code>key</code> and <code>originSymbol</code> of the asset</li> </ol> <pre><code>export const INSERT_ASSET_NAME = new Asset({\n  key: 'INSERT_KEY',\n  originSymbol: 'INSERT_ORIGIN_SYMBOL',\n});\n</code></pre> <p>For example, this is the configuration used for USDT:</p> <pre><code>export const usdt = new Asset({\n  key: 'usdt',\n  originSymbol: 'USDT',\n});\n</code></pre> <ol> <li>Add your asset to the <code>assetsList</code> array at the end of the file</li> </ol> <p>Note</p> <p>Assets are listed in alphabetical order. Please make sure you follow this order when adding new assets.</p>"},{"location":"contribute/xcm/#add-a-chain","title":"Add a Chain","text":"<p>The next step in supporting a new asset is to add chain information for all the chains to and from which your asset can be transferred. This is done in the chains configuration file.</p> <p>To add a chain, take the following steps:</p> <ol> <li>Open the <code>xcm-sdk/packages/config/src/chains.ts</code> file</li> <li>Add your asset to the list of imported assets from the assets configuration file (<code>./assets.ts</code>)</li> <li> <p>Create a new variable for each chain if an entry doesn't already exist. You'll need to create a Chain Object, providing metadata related to the chain</p> ParachainEVM Parachain <pre><code>new Parachain({\n  assetsData: [], // Optional - In the next step, you'll add assets here\n  ecosystem: Ecosystem.INSERT_ECOSYSTEM_TYPE, // Optional\n  genesisHash: 'INSERT_GENESIS_HASH',\n  isTestChain: INSERT_BOOLEAN, // Optional\n  key: 'INSERT_KEY',\n  name: 'INSERT_NAME',\n  nativeAsset: INSERT_NATIVE_ASSET, // from the assets.ts file\n  parachainId: INSERT_PARACHAIN_ID,\n  ss58Format: INSERT_SS58_FORMAT,\n  ws: ['INSERT_WSS_ENDPOINTS'],\n})\n\n;\n</code></pre> <pre><code>new EvmParachain({\n  assetsData: [], // Optional - In the next step, you'll add assets here\n  ecosystem: Ecosystem.INSERT_ECOSYSTEM_TYPE, // Optional\n  genesisHash: 'INSERT_GENESIS_HASH',\n  id: INSERT_EVM_CHAIN_ID,\n  isTestChain: INSERT_BOOLEAN, // Optional\n  key: 'INSERT_KEY',\n  name: 'INSERT_NAME',\n  nativeAsset: INSERT_NATIVE_ASSET, // from the assets.ts file\n  parachainId: INSERT_PARACHAIN_ID,\n  ss58Format: INSERT_SS58_FORMAT,\n  rpc: 'INSERT_RPC_ENDPOINT',\n  ws: ['INSERT_WSS_ENDPOINTS'],\n})\n</code></pre> <p>For example, this is the configuration for the Polkadot Asset Hub:</p> <pre><code>export const polkadotAssetHub = new Parachain({\n  assets: [],\n  ecosystem: Ecosystem.Polkadot,\n  genesisHash:\n    '0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f',\n  key: 'Polkadot-asset-hub',\n  name: 'Polkadot Asset Hub',\n  nativeAsset: dot,\n  parachainId: 1000,\n  ss58Format: 42,\n  ws: [\n    'wss://asset-hub-polkadot-rpc.dwellir.com',\n    'wss://polkadot-asset-hub-rpc.polkadot.io',\n    'wss://statemint.api.onfinality.io/public-ws',\n  ],\n  checkSovereignAccountBalances: true, // one of the optional params - in this case we want to perform a check on the sovereign account balances when transferring to Polkadot Asset Hub\n})\n</code></pre> </li> <li> <p>Add the newly created chain to the <code>chainsList</code> array at the end of the file</p> </li> </ol> <p>Note</p> <p>Chains are listed in alphabetical order. Please make sure you follow this order when adding new chains.</p> <p>Now that you've added the chain, you can continue to the next section to add the assets that this chain supports.</p>"},{"location":"contribute/xcm/#configure-a-chain-s-assets","title":"Configure a Chain's Assets","text":"<p>To designate a chain as a destination or source chain for an asset, you must specify the asset within the <code>assetsData</code> array of the chain's configuration. This array outlines the supported assets on the chain, and the asset information within it determines how the asset is identified or targeted on that specific chain. For example, when adding a chain's native asset, you'll need to define how the chain sees its own asset, and when adding the asset to a destination chain, you'll need to define how the destination chain sees the asset.</p> <p>To enable an asset to move between chains, follow these steps to configure the source and destination chains of an asset:</p> <ol> <li> <p>In the <code>assetsData</code> array of the source chain, you'll need to create a Chain Asset Object for the asset, specifying how the asset is seen on that chain. Since the asset is already defined in the assets configuration file, you can use the <code>fromAsset</code> method to create the Chain Asset Object.</p> <pre><code>new ChainAsset.fromAsset(INSERT_ASSET_FROM_ASSETS_CONFIG, {\n  address: 'INSERT_ADDRESS', // Optional\n  decimals: INSERT_DECIMALS,\n  ids: {\n    id: INSERT_CHAIN_ASSET_ID, // Optional \n    balanceId: INSERT_BALANCE_ID, // Optional, asset id for balance queries\n    minId: INSERT_MIN_ID, // Optional, asset id for minimum amount queries\n    palletInstance: INSERT_PALLET_INSTANCE, // Optional, index of the Assets pallet\n  },\n})\n</code></pre> <p>For example, this is the configuration for USDT on the Polkadot Asset Hub:</p> <pre><code>export const polkadotAssetHub = new Parachain({\n  ...\n  assetsData: [\n    ChainAsset.fromAsset(usdt, {\n      decimals: 6,\n      ids: {\n        id: 1984, // id of the asset on Polkadot Asset Hub\n        palletInstance: 50, // index of the Assets pallet, used in building the XCM extrinsic\n      },\n    }),\n  ],\n  ...\n});\n</code></pre> </li> <li> <p>In the destination chain's <code>assetsData</code> array, create a Chain Asset Object that defines the asset as seen on the destination chain. This will be different than the source chain's configurations, as every chain manages assets differently</p> <p>For example, to add support for USDT on Moonbeam, Moonbeam's chain configuration needs to include the configuration for USDT:</p> <pre><code>export const moonbeam = new EvmParachain({\n  assetsData: [\n      ...\n      ChainAsset.fromAsset(usdt, {\n        address: '0xFFFFFFfFea09FB06d082fd1275CD48b191cbCD1d', // address of the asset on Moonbeam  \n        decimals: 6,\n        ids: {\n          id: '311091173110107856861649819128533077277', // id of the asset on Moonbeam\n        },\n      }),\n      ...\n  ]\n  ...\n});\n</code></pre> </li> </ol> <p>The integration isn't complete yet; you'll need to define the methods used for cross-chain transfers for any new chains added. This will be covered in the following section.</p>"},{"location":"contribute/xcm/#configure-a-chain-route","title":"Configure a Chain Route","text":""},{"location":"contribute/xcm/#prerequisites","title":"Prerequisites","text":"<p>In this step, you have to create or update the configuration files of the chains between which you can transfer the asset. These files define the asset being transferred, the destination chain, information associated to fees, and builder functions. These builders define the pallets and methods necessary to achieve the specific goals of each type. They are as follows:</p> <ul> <li>Balance Builder - builds a query to retrieve the balance of an asset for a given account</li> <li>Contract Builder - builds the contract call for the cross-chain transfer. This is specific to EVM chains that use contracts to interact with Substrate pallets for cross-chain transfers, such as Moonbeam's X-Tokens precompiled contract</li> <li>Extrinsic Builder - builds the extrinsic for the cross-chain transfer</li> <li>Fee Builder - builds the query to retrieve the fee for the execution of the cross-chain transfer</li> <li>Minimum Asset Builder - builds a query to retrieve the minimum amount of an asset required to be left in an account</li> </ul> <p>You will need to know which pallet and method each chain is using for its XCM transactions and for fetching asset balances, and make sure that said pallets and methods are already available in the xcm-builder package.</p> <p>If they aren't available, feel free to open a PR or submit an issue on GitHub.</p>"},{"location":"contribute/xcm/#creating-the-routes-in-the-configuration-files","title":"Creating the routes in the configuration files","text":"<p>Assuming that all of the required pallets and methods are already supported, you can create the configuration file for the source chain:</p> <ol> <li>In the <code>xcm-sdk/packages/config/src/xcm-configs</code> directory, add a TypeScript file for the new chain. If the chain already has a configuration file, you can update it instead by adding the new routes, so you can go directly to step 3.</li> <li> <p>Use the following snippet as a starting point for adding the chain routes:</p> <pre><code>import { INSERT_REQUIRED_BUILDERS } from '@moonbeam-network/xcm-builder';\nimport { INSERT_REQUIRED_ASSETS } from '../assets';\nimport { INSERT_SOURCE_CHAIN, INSERT_DESTINATION_CHAIN } from '../chains';\nimport { ChainRoutes } from '../types/ChainRoutes';\n\n// The chain config name should be formatted as: 'chainName' + 'Routes'\nexport const INSERT_CHAIN_CONFIG_NAME = new ChainRoutes({\n  chain: INSERT_SOURCE_CHAIN, // The source chain\n  routes: [], // In the next step, you'll add routes here\n});\n</code></pre> </li> <li> <p>As seen in the above example, a <code>routes</code> array contains the chain's routes. The route configuration defines the asset being transferred, the destination chain, information associated with fees, and the builder functions. The builder functions must be used to build the queries or calls as if they were being executed from this chain.</p> <p>You'll need to create a Route for each asset, for example:</p> <pre><code>{\n  source: {\n    asset: INSERT_ASSET,\n    balance: INSERT_BALANCE_BUILDER,\n    fee: {\n      asset: INSERT_FEE_ASSET,\n      balance: INSERT_FEE_BALANCE_BUILDER,\n      extra: INSERT_FEE_AMOUNT, // Optional\n    },\n    destinationFee: {\n      asset: INSERT_DESTINATION_FEE_ASSET, // Optional, if the fee asset in destination have different representation in the source chain\n      balance: INSERT_DESTINATION_FEE_BALANCE_BUILDER, // The builder function for the balance in the source chain for the asset used for fees in the destination chain\n    },\n    min: INSERT_MIN_ASSET_BUILDER, // Optional\n  },\n  destination: {\n    asset: INSERT_ASSET, // The asset being transferred, but the representation in the destination chain\n    chain: INSERT_DESTINATION_CHAIN,\n    balance: INSERT_BALANCE_BUILDER,\n    fee: { \n      amount: INSERT_FEE_BUILDER, // Ideally a builder function, but can be a number with the specific amount of the fee\n      asset: INSERT_DESTINATION_FEE_ASSET, \n      balance: INSERT_DESTINATION_FEE_BALANCE_BUILDER, // Optional\n      extra: INSERT_EXTRA_FEE_AMOUNT, // Optional\n    },\n    min: INSERT_MIN_ASSET_BUILDER, // Optional\n  },\n  extrinsic: INSERT_EXTRINSIC_BUILDER,\n}\n</code></pre> </li> <li> <p>Add the newly created chain configurations to the <code>xcmRoutesList</code> in the <code>xcm-sdk/blob/main/packages/config/src/xcm-configs/index.ts</code> file</p> </li> </ol> <p>Note</p> <p>Chain configurations are listed in alphabetical order. Please follow this order when adding new chain configurations.</p> <p>For example, to add support to transfer USDT from the Polkadot Asset Hub to Moonbeam, the Polkadot Asset Hub configuration file is as follows:</p> <pre><code>import {\n  AssetMinBuilder,\n  BalanceBuilder,\n  ExtrinsicBuilder,\n  FeeBuilder,\n} from '@moonbeam-network/xcm-builder';\nimport { dot, usdt } from '../assets';\nimport { moonbeam, polkadotAssetHub } from '../chains';\nimport { ChainRoutes } from '../types/ChainRoutes';\n\nconst extra = 0.036;\n\nexport const polkadotAssetHubRoutes = new ChainRoutes({\n  chain: polkadotAssetHub,\n  routes: [\n    {\n      source: {\n        asset: usdt,\n        balance: BalanceBuilder().substrate().assets().account(),\n        fee: {\n          asset: dot, // fees in Polkadot Asset Hub are paid in DOT\n          balance: BalanceBuilder().substrate().system().account(),\n          extra,\n        },\n        min: AssetMinBuilder().assets().asset(),\n        destinationFee: {\n          balance: BalanceBuilder().substrate().assets().account(),\n        },\n      },\n      destination: {\n        asset: usdt,\n        chain: moonbeam,\n        balance: BalanceBuilder().substrate().assets().account(),\n        fee: {\n          amount: FeeBuilder()\n            .xcmPaymentApi()\n            .xcmPaymentFee({ isAssetReserveChain: false }),\n          asset: usdt, // fees in Moonbeam are paid in USDT, in this case is the same asset as the one being transferred, but it is not always the case\n        },\n      },\n      extrinsic: ExtrinsicBuilder()\n        .polkadotXcm()\n        .limitedReserveTransferAssets()\n        .X2(),\n    },\n  ],\n});\n</code></pre> <p>You're almost there. With this configuration, you can send the asset one-way from the configured chain to the asset's specified destination chain. To send the asset back to the original source chain, you must update (or create) the specified destination chain's configurations. Considering the above example, the Moonbeam configuration file would need to be updated to transfer USDT from Moonbeam back to the Polkadot Asset Hub.</p> <p>You must take the same steps in the destination chain's configuration file. If a configuration file does not exist, you must create one. Otherwise, update the chain's configuration file to include the asset route, as step three outlines.</p> <p>For example, enabling USDT transfers from Moonbeam back to the Polkadot Asset Hub requires the following Moonbeam chain configuration:</p> <pre><code>import {\n  AssetMinBuilder,\n  BalanceBuilder,\n  ContractBuilder,\n} from '@moonbeam-network/xcm-builder';\nimport { glmr, usdt } from '../assets';\nimport { moonbeam, polkadotAssetHub } from '../chains';\nimport { ChainRoutes } from '../types/ChainRoutes';\n\nexport const moonbeamRoutes = new ChainRoutes({\n  chain: moonbeam,\n  routes: [\n    {\n      source: {\n        asset: usdt,\n        balance: BalanceBuilder().substrate().assets().account(),\n        fee: {\n          asset: glmr,\n          balance: BalanceBuilder().substrate().system().account(),\n        },\n        destinationFee: {\n          balance: BalanceBuilder().substrate().assets().account(),\n        },\n      },\n      destination: {\n        asset: usdt,\n        chain: polkadotAssetHub,\n        balance: BalanceBuilder().substrate().assets().account(),\n        fee: {\n          amount: 0.02,\n          asset: usdt,\n        },\n        min: AssetMinBuilder().assets().asset(),\n      },\n      contract: ContractBuilder().Xtokens().transfer(),\n    },\n  ],\n});\n</code></pre> <p>And that's it! You now know how to add new assets and chains and configure the chains that an asset can be sent to and from. To ensure that you've properly set everything up, read on to the next section.</p>"},{"location":"contribute/xcm/#test-new-configurations","title":"Test New Configurations","text":"<p>The SDK is configured to work for most parachains in the Polkadot ecosystem. However, any given chain might have a different or particular way of requesting a specific piece of information, for example, if it uses unconventional pallets or different methods for existing pallets.</p> <p>You can use the following queries to ensure that the new configurations have been properly set up.</p> <ul> <li> <p><code>assetRegistry.assetMetadatas</code> - From here, we extract the <code>minBalance</code> for   <code>aSEED</code>:</p> <pre><code>{\n  name: aUSD SEED\n  symbol: aSEED\n  decimals: 12\n  minimalBalance: 100,0\n}\n</code></pre> </li> <li> <p><code>assets.assetMetadatas</code> - Here, we get the <code>minBalance</code> for <code>USDT</code></p> <pre><code>{\n  owner: 15uPcYeUE2XaMiMJuR6W7QGW2LsLdKXX7F3PxKG8gcizPh3X\n  issuer: 15uPcYeUE2XaMiMJuR6W7QGW2LsLdKXX7F3PxKG8gcizPh3X\n  admin: 15uPcYeUE2XaMiMJuR6W7QGW2LsLdKXX7F3PxKG8gcizPh3X\n  freezer: 15uPcYeUE2XaMiMJuR6W7QGW2LsLdKXX7F3PxKG8gcizPh3X\n  supply: 77,998,715,321,907\n  deposit: 1,000,000,000,000\n  minBalance: 10,000\n  isSufficient: true\n  accounts: 9,151\n  sufficients: 9,042\n  approvals: 14\n  status: Live\n}\n</code></pre> </li> <li> <p><code>balances.existentialDeposit</code> - This is the standard way of querying the existential deposit for most chains</p> <pre><code>100000000000;\n</code></pre> </li> </ul> <p>Most cases are considered already, but for newly integrated chains, this data might be queried by a different pallet or function.</p>"},{"location":"example-usage/mrl/","title":"Using the Moonbeam MRL SDK","text":""},{"location":"example-usage/mrl/#introduction","title":"Introduction","text":"<p>Moonbeam Routed Liquidity (MRL) allows liquidity from any blockchain connected to Moonbeam to be seamlessly routed to Polkadot parachains. The MRL SDK simplifies the process of routing liquidity from various blockchains into the Polkadot ecosystem by providing a set of tools and functions that abstract away the complexities of cross-chain communication, by leveraging GMP, XCM, and XC-20s.</p> <p>The SDK allows the three types of transfers. Here is a brief description of what happens in each:</p> <ol> <li>From EVM chains to parachains: Assets are sent from the EVM chain to Moonbeam via a GMP provider bridge (like Wormhole). A contract call is executed in Moonbeam which initiates the XCM transfer to the destination parachain.</li> <li>From parachains to EVM chains: Assets are sent alongside a remote execution message from the parachain to Moonbeam via XCM. The message then is executed in Moonbeam, which bridges the assets to the destination EVM chain via a GMP provider bridge.</li> <li>Bewtween Moonbeam and EVM chains: Assets move between Moonbeam and EVM chains via the GMP provider bridge.</li> </ol> <p>In MRL transfers, the transaction must be completed in the destination chain of the bridge. This can be done automatically by a relayer or manually by the user, and the SDK supports both options.</p> <p>Regardless of the type of transfer you're making, the usage of the MRL SDK is the same, with only a few considerations to be made when executing or completing the transfer.</p>"},{"location":"example-usage/mrl/#install-the-mrl-sdk","title":"Install the MRL SDK","text":"<p>To get started with the Moonbeam MRL SDK, you'll need first to install the SDK:</p> <pre><code>npm install @moonbeam-network/mrl\n</code></pre> <p>You'll also need to install a few additional dependencies that you'll use to interact with the SDK in this guide. You'll need the Polkadot.js API to create a Polkadot signer:</p> <pre><code>npm install @polkadot/api @polkadot/util-crypto\n</code></pre> <p>You'll also need an Ethereum signer if you're interacting with an Ethereum-compatible chain like Moonbeam. For that you'll need to install viem:</p> <pre><code>npm install viem@2\n</code></pre>"},{"location":"example-usage/mrl/#create-signers","title":"Create Signers","text":"<p>Similar to the XCM SDK, you'll need to create signers to interact with the SDK. You can refer to the Create Signers section in the XCM SDK guide for more information.</p>"},{"location":"example-usage/mrl/#get-chain-data","title":"Get Chain Data","text":"<p>You can use any of the following code examples to retrieve information on the supported assets and the chains that support these assets.</p>"},{"location":"example-usage/mrl/#get-list-of-supported-source-chains","title":"Get List of Supported Source chains","text":"<p>To get a list of all of the sources supported by the MRL SDK, you can instantiate the MRL SDK and get the sources property.</p> <pre><code>import { Mrl } from '@moonbeam-network/mrl';\n\nconst mrlInstance = Mrl();\nconst sources = mrlInstance.sources;\n\nconsole.log('The supported sources are as follows:');\nsources.forEach((source) =&gt; {\n  console.log(`- ${source.name}`);\n});\n</code></pre>"},{"location":"example-usage/mrl/#get-supported-sources-by-ecosystem","title":"Get List of Supported Sources by Ecosystem","text":"<p>To get a list of the supported sources for a particular ecosystem, you can pass in the ecosystem  <code>polkadot</code>, <code>kusama</code>, or <code>alphanet-relay</code>. Under the hood, the ecosystems for MRL are <code>Mainnet</code> or <code>Testnet</code>, you can extract the ecosystem from the chain configuration you're going to use. For example, the following snippet will get all of the sources supported in the ecosystem associated with Moonbeam:</p> <pre><code>import { Mrl } from '@moonbeam-network/mrl';\nimport { moonbeam } from '@moonbeam-network/xcm-config';\n\nconst mrlInstance = Mrl({ ecosystem: moonbeam.ecosystem });\nconst sources = mrlInstance.sources;\n\nconsole.log('The supported sources are as follows:');\nsources.forEach((source) =&gt; {\n  console.log(`- ${source.name}`);\n});\n</code></pre>"},{"location":"example-usage/mrl/#get-list-of-supported-routes-by-ecosystem","title":"Get List of Supported Routes by Ecosystem","text":"<p>To get a list of the supported routes for a particular ecosystem, you can use the following code snippet:</p> <pre><code>import { Mrl } from '@moonbeam-network/mrl';\nimport { Ecosystem } from '@moonbeam-network/xcm-types';\n\nconst mrlInstance = Mrl({ ecosystem: Ecosystem.Polkadot });\nconst sources = mrlInstance.sources;\n\nsources.forEach((source) =&gt; {\n  const { destinations, setDestination } = mrlInstance.setSource(source);\n  if (destinations.length &gt; 0) {\n    destinations.forEach((destination) =&gt; {\n      console.log(`You can transfer from ${source.name} to ${destination.name}:`);\n      const { assets } = setDestination(destination);\n      if (assets.length &gt; 0) {\n        assets.forEach((asset) =&gt; {\n          console.log(`- ${asset.originSymbol}`);\n        });\n      }\n    });\n  }\n});\n</code></pre>"},{"location":"example-usage/mrl/#build-mrl-transfer-data","title":"Build MRL Transfer Data","text":"<p>Much like in XCM, to transfer an asset from one chain to another, you'll need to first build the transfer data, which defines the asset to be transferred, the source chain and address, the destination chain and address, and the associated signer for the transaction. Building the transfer data is the first step; in the next section, you'll learn how to use it to actually transfer the asset.</p> <p>In MRL transfers, the assets must be redeemed, or the transfer must be executed in the destination chain of the bridge. This can be done automatically by a relayer or manually by the user. For manual executions, the SDK also provides a <code>executeTransfer</code> function that can be used after the transaction is completed. It will be explained in a following section.</p> <p>In this guide, we'll show you first how to build the transfer data if you already know the route you want to use and don't need chain or asset information. Then, we'll show you how to build the transfer data if you need to retrieve the list of supported assets and chains for a given asset, which is useful if you're building a UI to allow users to select the asset, source, and destination chains.</p>"},{"location":"example-usage/mrl/#build-mrl-transfer-data-simple","title":"Simple Example","text":"<p>In this example, if you want to transfer USDC from Ethereum to Hydration, you'll need to set the source, and destination chains, and the asset to get the transfer data. First you'll need to instantiate the SDK, by calling the <code>Mrl</code> function and then calling the <code>setAsset</code>, <code>setSource</code>, and <code>setDestination</code> functions. You can optionally pass in the ecosystem to the <code>Mrl</code> function, but in this example, you know the route you want to use, so there is no need to pass in the ecosystem.</p> <pre><code>import { Mrl } from '@moonbeam-network/mrl';\nimport { ethereum, hydration, usdc } from '@moonbeam-network/xcm-config';\n\nconst fromEvm = async () =&gt; {\n  const transferData = await Mrl()\n    .setSource(ethereum)\n    .setDestination(hydration)\n    .setAsset(usdc)\n    .setIsAutomatic(false)\n    .setAddresses({\n      sourceAddress: account.address,\n      destinationAddress: account.address,\n    });\n};\n\nfromEvm();\n</code></pre>"},{"location":"example-usage/mrl/#build-mrl-transfer-data-information","title":"Example with assets and chains information","text":"<p>To get started, you'll use the <code>Mrl</code> function, which eventually will return the transfer data after calling a series of chained methods. In this case you'll want to include the ecosystem, as you'll need to retrieve the list of supported assets and chains for the asset you want to transfer.</p> <pre><code>import { Mrl } from '@moonbeam-network/mrl';\nimport { Ecosystem } from '@moonbeam-network/xcm-types';\n\nconst mrlInstance = Mrl({ ecosystem: Ecosystem.Polkadot });\n</code></pre> <p>The chained methods will provide data on the assets and chains along the way, but the final method will return the transfer data. The process of calling the methods is as follows:</p> <ol> <li> <p>Get the list of supported sources for the specified ecosystem</p> <pre><code>const { sources, setSource } = mrlInstance;\n</code></pre> </li> <li> <p>Call the <code>setSource</code> function and pass in the source chain object or chain key to define the source chain for the transfer</p> <pre><code>import { ethereum } from '@moonbeam-network/xcm-config';\n\n// Using the object\nconst { destinations, setDestination } = mrlInstance.setSource(ethereum);\n\n// Using the key\nconst { destinations, setDestination } = mrlInstance.setSource('ethereum');\n</code></pre> </li> <li> <p>Call the <code>setDestination</code> function and pass in the destination chain object or chain key to define the destination chain for the transfer</p> <pre><code>import { hydration } from '@moonbeam-network/xcm-config';\n\nconst { assets, setAsset } = mrlInstance.setDestination(hydration);\n</code></pre> </li> <li> <p>Call the <code>setAsset</code> function and pass in the asset object or asset key to define the asset to be transferred</p> <pre><code>import { usdc } from '@moonbeam-network/xcm-config';\n\nconst { setIsAutomatic } = setAsset(usdc);\n</code></pre> </li> <li> <p>Call the <code>setIsAutomatic</code> function and pass in the boolean value to define if the transfer should be automatic or not.</p> <p><pre><code>const { setAddresses } = setIsAutomatic(false);\n</code></pre> There are routes in which the automatic transfer is not supported. You can check it in the chains routes file. If you set automatic as <code>true</code> for a route that is not supported, the SDK will throw an error at the moment of fetching the transfer data.</p> </li> <li> <p>Finally call the <code>setAddresses</code> function and pass in the source and destination addresses to define the addresses for the       ransfer. This will return the transfer data including the balances of the source and destination addresses. Take into account that depending on the source or the destination chain, the address format will be different. For example, from Ethereum to Hydration, you can pass as the source the address from the EVM signer, but as the destination the address from the Polkadot signer.</p> </li> </ol> <p>An example of the steps described above to build the transfer data to transfer USDC from Ethereym to Hydration is as follows:   </p> <pre><code>import { Mrl } from '@moonbeam-network/mrl';\nimport { hydration, usdc } from '@moonbeam-network/xcm-config';\nimport { ethereum } from '@moonbeam-network/xcm-config';\nimport { Ecosystem } from '@moonbeam-network/xcm-types';\n\nconst fromEvm = async () =&gt; {\n  const mrlInstance = Mrl({ ecosystem: Ecosystem.Polkadot });\n  const { sources, setSource } = mrlInstance;\n\n  console.log(\n    `The supported sources are: ${sources.map((asset) =&gt; asset.name)}`,\n  );\n\n  const { destinations, setDestination } = setSource(ethereum);\n  console.log(\n    `The supported destinations are: ${destinations.map((asset) =&gt; asset.name)}`,\n  );\n\n  const { assets, setAsset } = setDestination(hydration);\n  console.log(\n    `The supported assets are: ${assets.map((asset) =&gt; asset.originSymbol)}`,\n  );\n\n  const { setIsAutomatic } = setAsset(usdc);\n\n  const { setAddresses } = setIsAutomatic(false);\n\n  const transferData = await setAddresses({\n    sourceAddress: account.address,\n    destinationAddress: pair.address,\n  });\n\n  console.log(transferData);\n\n};\n\nfromEvm();\n</code></pre> <p>The same output will be generated regardless of which example you used to build the transfer data.</p> Example response <pre><code>// Send USDC from Ethereum to Hydration\n// transfer data\n{\n    destination: {\n        chain: _Parachain {\n        assets: Map(7) {\n            \"hdx\": [Object ...],\n            \"glmr\": [Object ...],\n            \"dai\": [Object ...],\n            \"usdcwh\": [Object ...],\n            \"usdtwh\": [Object ...],\n            \"wbtc\": [Object ...],\n            \"weth\": [Object ...],\n        },\n        ecosystem: \"polkadot\",\n        explorer: \"https://hydradx.subscan.io\",\n        isTestChain: false,\n        key: \"hydration\",\n        name: \"Hydration\",\n        wh: undefined,\n        checkSovereignAccountBalances: false,\n        genesisHash: \"0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d\",\n        isRelay: false,\n        parachainId: 2034,\n        ss58Format: 63,\n        usesChainDecimals: false,\n        weight: undefined,\n        ws: [ \"wss://rpc.hydradx.cloud\", \"wss://rpc.helikon.io/hydradx\", \"wss://hydradx.paras.dotters.network\",\n            \"wss://hydradx-rpc.dwellir.com\"\n        ],\n        nativeAsset: [Getter],\n        isEqual: [Function: isEqual],\n        getChainAsset: [Function: getChainAsset],\n        getWormholeName: [Function: getWormholeName],\n        },\n        balance: _AssetAmount {\n        key: \"usdcwh\",\n        originSymbol: \"USDC.Wh\",\n        address: undefined,\n        decimals: 6,\n        ids: [Object ...],\n        min: undefined,\n        symbol: undefined,\n        amount: 8271697n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        existentialDeposit: _AssetAmount {\n        key: \"hdx\",\n        originSymbol: \"HDX\",\n        address: undefined,\n        decimals: 12,\n        ids: [Object ...],\n        min: undefined,\n        symbol: undefined,\n        amount: 1000000000000n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        fee: _AssetAmount {\n        key: \"usdcwh\",\n        originSymbol: \"USDC.Wh\",\n        address: undefined,\n        decimals: 6,\n        ids: [Object ...],\n        min: undefined,\n        symbol: undefined,\n        amount: 4000n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        min: _AssetAmount {\n        key: \"usdcwh\",\n        originSymbol: \"USDC.Wh\",\n        address: undefined,\n        decimals: 6,\n        ids: [Object ...],\n        min: undefined,\n        symbol: undefined,\n        amount: 0n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        sovereignAccountBalances: undefined,\n    },\n    getEstimate: [Function: getEstimate],\n    isAutomaticPossible: false,\n    max: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 3328424n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    min: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 4000n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    moonChain: {\n        address: \"0x98891e5FD24Ef33A488A47101F65D212Ff6E650E\",\n        balance: _AssetAmount {\n        key: \"usdcwh\",\n        originSymbol: \"USDC.Wh\",\n        address: \"0x931715FEE2d06333043d11F658C8CE934aC61D0c\",\n        decimals: 6,\n        ids: [Object ...],\n        min: undefined,\n        symbol: undefined,\n        amount: 2081768n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        feeBalance: _AssetAmount {\n        key: \"glmr\",\n        originSymbol: \"GLMR\",\n        address: \"0x0000000000000000000000000000000000000802\",\n        decimals: 18,\n        ids: [Object ...],\n        min: 100000000000000000n,\n        symbol: undefined,\n        amount: 206735189943789999813n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        chain: _EvmParachain {\n        assets: Map(45) {\n            \"aca\": [Object ...],\n            \"astr\": [Object ...],\n            \"aseed\": [Object ...],\n            \"axlusdc\": [Object ...],\n            \"bnc\": [Object ...],\n            \"bncs\": [Object ...],\n            \"cfg\": [Object ...],\n            \"dai\": [Object ...],\n            \"ded\": [Object ...],\n            \"dot\": [Object ...],\n            \"eq\": [Object ...],\n            \"eqd\": [Object ...],\n            \"fil\": [Object ...],\n            \"glmr\": [Object ...],\n            \"hdx\": [Object ...],\n            \"ibtc\": [Object ...],\n            \"intr\": [Object ...],\n            \"ldot\": [Object ...],\n            \"manta\": [Object ...],\n            \"nodl\": [Object ...],\n            \"neuro\": [Object ...],\n            \"peaq\": [Object ...],\n            \"pha\": [Object ...],\n            \"pen\": [Object ...],\n            \"ring\": [Object ...],\n            \"sub\": [Object ...],\n            \"usdc\": [Object ...],\n            \"usdcwh\": [Object ...],\n            \"usdtwh\": [Object ...],\n            \"usdt\": [Object ...],\n            \"vastr\": [Object ...],\n            \"vdot\": [Object ...],\n            \"vfil\": [Object ...],\n            \"vglmr\": [Object ...],\n            \"vmanta\": [Object ...],\n            \"wbtc\": [Object ...],\n            \"weth\": [Object ...],\n            \"ztg\": [Object ...],\n            \"pink\": [Object ...],\n            \"stink\": [Object ...],\n            \"apillon\": [Object ...],\n            \"wifd\": [Object ...],\n            \"wbtce\": [Object ...],\n            \"wethe\": [Object ...],\n            \"wstethe\": [Object ...],\n        },\n        ecosystem: \"polkadot\",\n        explorer: \"https://moonbeam.moonscan.io\",\n        isTestChain: false,\n        key: \"moonbeam\",\n        name: \"Moonbeam\",\n        wh: [Object ...],\n        checkSovereignAccountBalances: false,\n        genesisHash: \"0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d\",\n        isRelay: false,\n        parachainId: 2004,\n        ss58Format: 1284,\n        usesChainDecimals: false,\n        weight: undefined,\n        ws: [ \"wss://wss.api.moonbeam.network\" ],\n        id: 1284,\n        rpc: \"https://rpc.api.moonbeam.network\",\n        isEvmSigner: true,\n        contracts: undefined,\n        getViemChain: [Function: getViemChain],\n        nativeAsset: [Getter],\n        isEqual: [Function: isEqual],\n        getChainAsset: [Function: getChainAsset],\n        getWormholeName: [Function: getWormholeName],\n        },\n        fee: _AssetAmount {\n        key: \"glmr\",\n        originSymbol: \"GLMR\",\n        address: \"0x0000000000000000000000000000000000000802\",\n        decimals: 18,\n        ids: [Object ...],\n        min: 100000000000000000n,\n        symbol: undefined,\n        amount: 150000000000000000n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n    },\n    source: {\n        balance: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 3328424n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        chain: _EvmChain {\n        assets: Map(7) {\n            \"eth\": [Object ...],\n            \"usdc\": [Object ...],\n            \"usdt\": [Object ...],\n            \"dai\": [Object ...],\n            \"wbtc\": [Object ...],\n            \"glmr\": [Object ...],\n            \"peaq\": [Object ...],\n        },\n        ecosystem: \"polkadot\",\n        explorer: \"https://etherscan.io\",\n        isTestChain: false,\n        key: \"ethereum\",\n        name: \"Ethereum\",\n        wh: [Object ...],\n        id: 1,\n        rpc: \"https://ethereum-rpc.publicnode.com\",\n        getViemChain: [Function: getViemChain],\n        nativeAsset: [Getter],\n        isEqual: [Function: isEqual],\n        getChainAsset: [Function: getChainAsset],\n        getWormholeName: [Function: getWormholeName],\n        },\n        destinationFee: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 4000n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        destinationFeeBalance: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 3328424n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        moonChainFeeBalance: undefined,\n        existentialDeposit: undefined,\n        fee: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 0n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        feeBalance: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 3328424n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        max: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 3328424n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        min: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 0n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        relayerFee: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 0n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n    },\n    transfer: [AsyncFunction: transfer],\n}\n</code></pre> <p>As you may have noticed in the example response, the transfer data contains information on the asset, source, and destination chain, and also the moonChain. In addition, a couple of functions have been exposed:</p> <ul> <li><code>transfer</code> - transfers a given amount of the asset from the source chain to the destination chain</li> <li><code>getEstimate</code> - returns an estimated amount of the asset that will be received on the destination chain, less any destination fees</li> </ul>"},{"location":"example-usage/mrl/#transfer-an-asset","title":"Transfer an Asset","text":"<p>Now that you've built the transfer data, you can transfer the asset from the source chain to the destination chain. To do so, you can use the <code>transfer</code> function, but first, you'll need to specify an amount to send. You can specify the amount in integer or decimal format. For example, if you wanted to send 0.1 USDC, you could use <code>100000n</code> or <code>'0.1'</code>. You can use asset conversion methods, like <code>toDecimal</code> to convert the asset to decimal format. You'll also need to specify if the transfer is automatic or not and the signer you're using for the transfer.</p> <p>For this example, you can transfer twice the minimum amount required of USDC:</p> <pre><code>...\n\nconst amount = +transferData.min.toDecimal() * 1.5 + 0.000001;\nconsole.log(\n    `\\nSending ${amount} ${transferData.source.balance.getSymbol()} from ${transferData.source.chain.name} to ${transferData.destination.chain.name}`,\n);\nconst result = await transferData.transfer(amount, false, {\n    evmSigner: walletClient,\n});\n</code></pre> <p>The <code>transfer</code> function returns an array of strings that represent the transaction hashes. It is an array because for some assets coming from EVM chains, two transactions are sent in the process: one Approve and the actual Transfer. Where applicable, the first transaction is the Approve and the second is the Transfer. Where an Approve is not needed, only one transaction is returned.</p> <p>Note</p> <p>The transfer function also admits other optional parameters, which are not needed for this example. For more information on the parameters and returned data for <code>transfer</code>, please refer to the MRL SDK Reference.</p>"},{"location":"example-usage/mrl/#execute-the-transfer","title":"Execute the Transfer","text":"<p>As mentioned before, if the isAutomatic flag is set to false, a manual execution is required to complete the transfer in the destination chain of the bridge (redeem chain). Take into account that, if the transfer is from EVM chains to a Parachain, the redeem chain is the MoonChain, which is where the GMP contract call is made to initiate the XCM transfer to the destination parachain. For other types of transfers, the redeem chain is the destination chain.</p> <p>This SDK also provides a function for executing the transfer, but the same way as with the transfer, you first have to build the execute transfer data.</p>"},{"location":"example-usage/mrl/#build-the-execute-transfer-data","title":"Build the Execute Transfer Data","text":"<p>Following the example above, you can build the execute transfer data by calling the <code>getExecuteTransferData</code> function, with the transfer hash that was returned from the transfer function.</p> <p>Remember that for this example (Ethereum to Hydration), the redeem chain is going to be Moonbeam, which can be extracted from the transfer data as moonChain.</p> <pre><code>...\n\nconst hash = result.pop();\n\nif (!isAutomatic &amp;&amp; hash) {\n    const executeTransferData = await Mrl().getExecuteTransferData({\n        txId: hash,\n        chain: transferData.moonChain.chain,\n    });\n}\n</code></pre>"},{"location":"example-usage/mrl/#execute-the-transfer","title":"Execute the Transfer","text":"<p>Once you have the execute transfer data, you can execute the transfer by calling the <code>executeTransfer</code> function. You'll need to specify the signer you're using for the redeem chain. Note that the signer is different from the signer used for the transfer, as the chains are different.</p> <pre><code>...\n\nconst moonChainWalletClient = createWalletClient({\n    account,\n    chain: transferData.moonChain.chain.getViemChain(),\n    transport: http(),\n});\n\n\nconst executeTransferResult = await executeTransferData.executeTransfer(moonChainWalletClient);\n</code></pre>"},{"location":"example-usage/mrl/#get-estimate","title":"Get an Estimate of the Asset to Be Received on the Destination Chain","text":"<p>When you send an MRL message, you typically pay fees on the destination chain to execute the XCM instructions, if any, or to pay the relayer if the transfer is set as automatic. Before you transfer the asset, you can use the <code>getEstimate</code> function to calculate an estimated amount of the asset that will be received on the destination chain minus any fees.</p> <p>The <code>getEstimate</code> function is tied to a specific transfer request as it is based on the asset being transferred and the destination chain fees, so you'll need to create the transfer data first.</p> <p>You must provide the amount to be transferred to the <code>getEstimate</code> function. In the following example, you'll get the estimated amount of DOT that will be received on Moonbeam when 0.1 DOT is transferred. You can specify the amount in integer (<code>1000000000n</code>) or decimal (<code>'0.1'</code>) format.</p> <pre><code>...\n\nconst amount = '0.1';\nconst estimatedAmount = transferData.getEstimate(amount);\n\nconsole.log(\n  `The estimated amount of ${\n    transferData.source.balance.originSymbol\n  } to be received on ${\n    transferData.destination.chain.name\n  } is: ${estimatedAmount.toDecimal()} ${transferData.destination.balance.getSymbol()}`,\n);\n</code></pre>"},{"location":"example-usage/mrl/#get-moonchain-info","title":"Get information about the MoonChain","text":"<p>The MoonChain (Moonbeam for Mainnet and Moonbase Alpha for Testnet) is the chain which serves as intermediary between the Polkadot Ecosystem and external chains.</p> <p>Depending on the type of transfer you're making, you may need to have balance in the MoonChain to pay for the fees. You can see the information about the balance by looking at the <code>moonChain</code> property in the transfer data.</p> <pre><code>...\n\nconsole.log(\n    `This transfer will need to pay ${transferData.moonChain.fee.amount} ${transferData.moonChain.fee.getSymbol()} in ${transferData.moonChain.chain.name}`,\n);\nconsole.log(\n    `The current balance in ${transferData.moonChain.chain.name} for the address ${transferData.moonChain.address} is ${transferData.moonChain.feeBalance.toDecimal()} ${transferData.moonChain.feeBalance.getSymbol()}`,\n);\n</code></pre>"},{"location":"example-usage/xcm/","title":"Using the Moonbeam XCM SDK","text":""},{"location":"example-usage/xcm/#introduction","title":"Introduction","text":"<p>The Moonbeam XCM SDK enables developers to easily transfer assets between chains, either between parachains or between a parachain and the relay chain, within the Polkadot/Kusama ecosystem. With the SDK, you don't need to worry about determining the multilocation of the origin or destination assets or which extrinsics are used on which networks to send XCM transfers.</p> <p>The XCM SDK offers helper functions that provide a very simple interface for executing XCM transfers between chains in the Polkadot/Kusama ecosystem. In addition, the XCM config package allows any parachain project to add their information in a standard way, so the XCM SDK can immediately support them.</p> <p>For an overview of the available methods and interfaces in the Moonbeam XCM SDK, please refer to the Reference page.</p> <p>This guide shows how to transfer DOT from Polkadot to Moonbeam.</p>"},{"location":"example-usage/xcm/#install-the-xcm-sdk","title":"Install the XCM SDK","text":"<p>To get started with the Moonbeam XCM SDK, you'll need first to install the SDK:</p> <pre><code>npm install @moonbeam-network/xcm-sdk\n</code></pre> <p>You'll also need to install a few additional dependencies that you'll use to interact with the SDK in this guide. You'll need the Polkadot.js API to create a Polkadot signer:</p> <pre><code>npm install @polkadot/api @polkadot/util-crypto\n</code></pre> <p>You'll also need an Ethereum signer if you're interacting with an Ethereum-compatible chain like Moonbeam. For that you'll need to install viem:</p> <pre><code>npm install viem@2\n</code></pre>"},{"location":"example-usage/xcm/#create-signers","title":"Create Signers","text":"<p>When transferring assets between chains, you'll need signers in place to sign the transactions. If you're interacting with an Ethereum-compatible chain that uses standard Ethereum-style H160 addresses, such as Moonbeam, you'll need to have an Ethereum signer, like a viem Wallet Client. To interact with the relay chain or other parachains, you'll need a Polkadot signer.</p> <p>You can pass, for example, a browser extension wallet as a signer into viem, such as MetaMask. Similarly, with Polkadot, you can pass a compatible wallet to the signer using the <code>@polkadot/extension-dapp</code> library.</p> <p>To create an EVM signer and a Polkadot signer, you can refer to the following sections.</p> <p>Warning</p> <p>Never store your private key or mnemonic in a JavaScript or TypeScript file.</p>"},{"location":"example-usage/xcm/#create-a-evm-signer","title":"Create an EVM Signer","text":"<p>You can create a viem Wallet Client to pass as an EVM signer. Here are some examples of configurations:</p> MoonbeamMoonriverMoonbase Alpha <pre><code>import { moonbeam } from '@moonbeam-network/xcm-config';\nimport { createWalletClient, http, type Address } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst account = privateKeyToAccount(privateKey as Address);\n\nconst evmSigner = createWalletClient({\n  account,\n  chain: moonbeam.getViemChain(),\n  transport: http(),\n});\n</code></pre> <pre><code>import { moonriver } from '@moonbeam-network/xcm-config';\nimport { createWalletClient, http, type Address } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst account = privateKeyToAccount(privateKey as Address);\n\nconst evmSigner = createWalletClient({\n  account,\n  chain: moonriver.getViemChain(),\n  transport: http(),\n});\n</code></pre> <pre><code>import { moonbaseAlpha } from '@moonbeam-network/xcm-config';\nimport { createWalletClient, http, type Address } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\nconst account = privateKeyToAccount(privateKey as Address);\n\nconst evmSigner = createWalletClient({\n  account,\n  chain: moonbaseAlpha.getViemChain(),\n  transport: http(),\n});\n</code></pre> <p>If you want to pass in a browser extension wallet to viem, you can use the following code:</p> MoonbeamMoonriverMoonbase Alpha <pre><code>import { moonbeam } from '@moonbeam-network/xcm-config';\nimport { createWalletClient, custom } from 'viem';\n\nconst evmSigner = createWalletClient({\n  chain: moonbeam.getViemChain(),\n  transport: custom(window.ethereum),\n});\n</code></pre> <pre><code>import { moonriver } from '@moonbeam-network/xcm-config';\nimport { createWalletClient, custom } from 'viem';\n\nconst evmSigner = createWalletClient({\n  chain: moonriver.getViemChain(),\n  transport: custom(window.ethereum),\n});\n</code></pre> <pre><code>import { moonbaseAlpha } from '@moonbeam-network/xcm-config';\nimport { createWalletClient, custom } from 'viem';\n\nconst evmSigner = createWalletClient({\n  chain: moonbaseAlpha.getViemChain(),\n  transport: custom(window.ethereum),\n});\n</code></pre> <p>Note</p> <p>To configure your project for Moonbeam or Moonriver, you will need to have your own endpoint and API key, which you can get from one of the supported Endpoint Providers.</p>"},{"location":"example-usage/xcm/#create-a-polkadot-signer","title":"Create a Polkadot Signer","text":"<p>In this example, you can use a Polkadot.js Keyring to sign transactions. Please note that this approach is not recommended for production applications. </p> <pre><code>import { polkadot } from '@moonbeam-network/xcm-config';\nimport { Keyring } from '@polkadot/api';\nimport { cryptoWaitReady } from '@polkadot/util-crypto';\n\nconst privateKey = 'INSERT_PRIVATE_KEY';\n\nconst createPolkadotSigner = async () =&gt; {\n  await cryptoWaitReady();\n  const keyring = new Keyring({\n    ss58Format: polkadot.ss58Format,\n    type: 'sr25519',\n  });\n  const pair = keyring.createFromUri(privateKey);\n};\n\ncreatePolkadotSigner();\n</code></pre> <p>Note</p> <p>In the above <code>INSERT_PRIVATE_KEY</code> field, you can specify a seed phrase instead of a private key.</p>"},{"location":"example-usage/xcm/#asset-chain-data","title":"Get Asset and Chain Data","text":"<p>You can use any of the following code examples to retrieve information on the supported assets and the chains that support these assets.</p>"},{"location":"example-usage/xcm/#get-list-of-supported-assets","title":"Get List of Supported Assets","text":"<p>To get a list of all of the assets supported by the XCM SDK, you can instantiate the XCM SDK and get the assets property.</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\n\nconst sdkInstance = Sdk();\nconst assets = sdkInstance.assets;\n\nconsole.log('The supported assets are as follows:');\nassets.forEach((asset) =&gt; {\n  console.log(`- ${asset.originSymbol}`);\n});\n</code></pre>"},{"location":"example-usage/xcm/#get-supported-assets-by-ecosystem","title":"Get List of Supported Assets by Ecosystem","text":"<p>To get a list of the supported assets for a particular ecosystem, you can pass in the ecosystem: <code>polkadot</code>, <code>kusama</code>, or <code>alphanet-relay</code>. For example, the following snippet will get all of the Polkadot assets supported:</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\nimport { Ecosystem } from '@moonbeam-network/xcm-types';\n\nconst sdkInstance = Sdk({ ecosystem: Ecosystem.Polkadot });\nconst assets = sdkInstance.assets;\n\nconsole.log(\n  'The supported assets within the Polkadot ecosystem are as follows:',\n);\nassets.forEach((asset) =&gt; {\n  console.log(`- ${asset.originSymbol}`);\n});\n</code></pre>"},{"location":"example-usage/xcm/#get-list-of-supported-routes-by-asset","title":"Get List of Supported Routes by Asset","text":"<p>To get a list of the supported source and destination chains for a given asset, you can use the following code snippet, which logs the supported routes by asset for all of the supported assets in the Polkadot ecosystem:</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\nimport { Ecosystem } from '@moonbeam-network/xcm-types';\n\nconst sdkInstance = Sdk({ ecosystem: Ecosystem.Polkadot });\nconst assets = sdkInstance.assets;\n\nassets.forEach((asset) =&gt; {\n  const { sources, setSource } = sdkInstance.setAsset(asset);\n\n  console.log(`You can send ${asset.originSymbol}...`);\n\n  if (sources.length &gt; 1) {\n    sources.forEach((source) =&gt; {\n      const { destinations } = setSource(source);\n\n      if (destinations.length &gt; 0) {\n        destinations.forEach((destination) =&gt; {\n          console.log(`- From ${source.name} to ${destination.name}`);\n        });\n      }\n    });\n  }\n});\n</code></pre>"},{"location":"example-usage/xcm/#build-xcm-transfer-data","title":"Build XCM Transfer Data","text":"<p>To transfer an asset from one chain to another, you'll need to first build the transfer data, which defines the asset to be transferred, the source chain and address, the destination chain and address, and the associated signer for the transaction. Building the transfer data is the first step; in the next section, you'll learn how to use it to actually transfer the asset.</p> <p>In this guide, we'll show you first how to build the transfer data if you already know the route you want to use and don't need chain or asset information. Then, we'll show you how to build the transfer data if you need to retrieve the list of supported assets and chains for a given asset, which is useful if you're building a UI to allow users to select the asset, source, and destination chains.</p>"},{"location":"example-usage/xcm/#build-xcm-transfer-data-simple","title":"Simple Example","text":"<p>In this example, we want to transfer DOT from Polkadot to Moonbeam. So to get the transfer data, we'll need to set the asset, source, and destination chains. First we'll need to instantiate the SDK, by calling the <code>Sdk</code> method and then calling the <code>setAsset</code>, <code>setSource</code>, and <code>setDestination</code> methods. You can optionally pass in the ecosystem to the <code>Sdk</code> method, but in this example, we know the route we want to use, so there is no need to pass in the ecosystem.</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\nimport { dot, polkadot, moonbeam } from '@moonbeam-network/xcm-config';\n\nconst fromPolkadot = async () =&gt; {\n  const transferData = await Sdk()\n  .setAsset(dot)\n  .setSource(polkadot)\n  .setDestination(moonbeam)\n  .setAddresses({\n    sourceAddress: pair.address,\n      destinationAddress: account.address,\n    });\n  };\n\nfromPolkadot();\n</code></pre>"},{"location":"example-usage/xcm/#build-xcm-transfer-data-information","title":"Example with assets and chains information","text":"<p>To get started, you'll use the <code>Sdk</code> method, which eventually will return the transfer data after calling a series of chained methods. In this case you'll want to include the ecosystem, as you'll need to retrieve the list of supported assets and chains for the asset you want to transfer.</p> <pre><code>import { Sdk } from '@moonbeam-network/xcm-sdk';\nimport { Ecosystem } from '@moonbeam-network/xcm-types';\n\nconst sdkInstance = Sdk({ ecosystem: Ecosystem.Polkadot });\n</code></pre> <p>The chained methods will provide data on the assets and chains along the way, but the final method will return the transfer data. The process of calling the methods is as follows:</p> <ol> <li> <p>Get the list of supported assets for the specified ecosystem</p> <pre><code>const { assets, setAsset } = sdkInstance;\n</code></pre> </li> <li> <p>Call the <code>setAsset</code> function and pass in the key or asset object (which includes the key and the origin symbol) to define the asset to be transferred. For example:</p> <pre><code>import { dot } from '@moonbeam-network/xcm-config';\n\n// Using the object\nconst { sources, setSource } = setAsset(dot);\n\n// Using the key\nconst { sources, setSource } = setAsset('dot');\n</code></pre> <p>This will return a list of the supported source chains for this asset and the <code>setSource</code> function, which is used to define the source chain to transfer the asset from</p> </li> <li> <p>Call the <code>setSource</code> function and pass in the chain key or chain object (which includes the key, name, and chain type). For example:</p> <pre><code>import { polkadot } from '@moonbeam-network/xcm-config';\n\n// Using the object\nconst { destinations, setDestination } = setSource(polkadot);\n</code></pre> <p>This will return a list of the supported destination chains where there is an open XCM channel from the source chain for the given asset and the <code>setDestination</code> function, which is used to define the destination chain to transfer the asset to.</p> </li> <li> <p>Call the <code>setDestination</code> function and pass in the chain key or chain object (which includes the key, name, and chain type). For example:</p> <pre><code>// Using the key\nconst { setAddresses } = setDestination('moonbeam');\n</code></pre> <p>This will return the <code>setAddresses</code> function, which is used to define the source and destination addresses.</p> </li> </ol> <p>The asset and chain objects are managed within the <code>@moonbeam-network/xcm-config</code> package. You do not need to directly interact with this package as the SDK exposes this data, but there you can find the list of assets and chain data.</p> <p>An example of the steps described above to build the transfer data to transfer DOT from the Polkadot relay chain to Moonbeam is as follows:</p> <pre><code>import { dot, moonbeam, polkadot } from '@moonbeam-network/xcm-config';\nimport { Sdk } from '@moonbeam-network/xcm-sdk';\nimport { Ecosystem } from '@moonbeam-network/xcm-types';\n\n\nconst fromPolkadot = async () =&gt; {\n  const sdkInstance = Sdk({ ecosystem: Ecosystem.Polkadot });\n\n  const { assets, setAsset } = sdkInstance;\n\n  console.log(\n    `The supported assets are: ${assets.map((asset) =&gt; asset.originSymbol)}`,\n  );\n\n  const { sources, setSource } = setAsset(dot);\n  console.log(\n    `The supported source chains are: ${sources.map((chain) =&gt; chain.name)}`,\n  );\n\n  const { destinations, setDestination } = setSource(polkadot);\n  console.log(\n    `The supported destination chains are: ${destinations.map(\n      (chain) =&gt; chain.name,\n    )}`,\n  );\n\n  const { setAddresses } = setDestination(moonbeam);\n\n  const transferData = await setAddresses({\n    sourceAddress: pair.address,\n    destinationAddress: account.address,\n  });\n\n}\n\nfromPolkadot();\n</code></pre> <p>Note</p> <p>For more information on each of the <code>Sdk()</code> builder functions, including the parameters and returned data, please refer to the XCM SDK Reference.</p> <p>The same output will be generated regardless of which example you used to build the transfer data.</p> Example response <pre><code>// Send DOT from Polkadot to Moonbeam\n// transfer data\n{\n  destination: {\n    chain: _EvmParachain {\n      assets: Map(45) {\n        \"aca\": [Object ...],\n        \"astr\": [Object ...],\n        \"aseed\": [Object ...],\n        \"axlusdc\": [Object ...],\n        \"bnc\": [Object ...],\n        \"bncs\": [Object ...],\n        \"cfg\": [Object ...],\n        \"dai\": [Object ...],\n        \"ded\": [Object ...],\n        \"dot\": [Object ...],\n        \"eq\": [Object ...],\n        \"eqd\": [Object ...],\n        \"fil\": [Object ...],\n        \"glmr\": [Object ...],\n        \"hdx\": [Object ...],\n        \"ibtc\": [Object ...],\n        \"intr\": [Object ...],\n        \"ldot\": [Object ...],\n        \"manta\": [Object ...],\n        \"nodl\": [Object ...],\n        \"neuro\": [Object ...],\n        \"peaq\": [Object ...],\n        \"pha\": [Object ...],\n        \"pen\": [Object ...],\n        \"ring\": [Object ...],\n        \"sub\": [Object ...],\n        \"usdc\": [Object ...],\n        \"usdcwh\": [Object ...],\n        \"usdtwh\": [Object ...],\n        \"usdt\": [Object ...],\n        \"vastr\": [Object ...],\n        \"vdot\": [Object ...],\n        \"vfil\": [Object ...],\n        \"vglmr\": [Object ...],\n        \"vmanta\": [Object ...],\n        \"wbtc\": [Object ...],\n        \"weth\": [Object ...],\n        \"ztg\": [Object ...],\n        \"pink\": [Object ...],\n        \"stink\": [Object ...],\n        \"apillon\": [Object ...],\n        \"wifd\": [Object ...],\n        \"wbtce\": [Object ...],\n        \"wethe\": [Object ...],\n        \"wstethe\": [Object ...],\n      },\n      ecosystem: \"polkadot\",\n      explorer: \"https://moonbeam.moonscan.io\",\n      isTestChain: false,\n      key: \"moonbeam\",\n      name: \"Moonbeam\",\n      wh: [Object ...],\n      checkSovereignAccountBalances: false,\n      genesisHash: \"0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d\",\n      isRelay: false,\n      parachainId: 2004,\n      ss58Format: 1284,\n      usesChainDecimals: false,\n      weight: undefined,\n      ws: [ \"wss://wss.api.moonbeam.network\" ],\n      id: 1284,\n      rpc: \"https://rpc.api.moonbeam.network\",\n      isEvmSigner: true,\n      contracts: undefined,\n      getViemChain: [Function: getViemChain],\n      nativeAsset: [Getter],\n      isEqual: [Function: isEqual],\n      getChainAsset: [Function: getChainAsset],\n      getWormholeName: [Function: getWormholeName],\n    },\n    balance: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: \"0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080\",\n      decimals: 10,\n      ids: [Object ...],\n      min: undefined,\n      symbol: undefined,\n      amount: 17683227925n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    existentialDeposit: _AssetAmount {\n      key: \"glmr\",\n      originSymbol: \"GLMR\",\n      address: \"0x0000000000000000000000000000000000000802\",\n      decimals: 18,\n      ids: [Object ...],\n      min: 100000000000000000n,\n      symbol: undefined,\n      amount: 0n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    fee: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: \"0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080\",\n      decimals: 10,\n      ids: [Object ...],\n      min: undefined,\n      symbol: undefined,\n      amount: 84005160n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    min: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: \"0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080\",\n      decimals: 10,\n      ids: [Object ...],\n      min: undefined,\n      symbol: undefined,\n      amount: 0n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    sovereignAccountBalances: undefined,\n  },\n  getEstimate: [Function: getEstimate],\n  max: _AssetAmount {\n    key: \"dot\",\n    originSymbol: \"DOT\",\n    address: undefined,\n    decimals: 10,\n    ids: undefined,\n    min: undefined,\n    symbol: undefined,\n    amount: 18514479903n,\n    isSame: [Function: isSame],\n    isEqual: [Function: isEqual],\n    copyWith: [Function: copyWith],\n    convertDecimals: [Function: convertDecimals],\n    toBig: [Function: toBig],\n    toBigDecimal: [Function: toBigDecimal],\n    toDecimal: [Function: toDecimal],\n    getSymbol: [Function: getSymbol],\n    getAssetId: [Function: getAssetId],\n    getBalanceAssetId: [Function: getBalanceAssetId],\n    getMinAssetId: [Function: getMinAssetId],\n    getAssetPalletInstance: [Function: getAssetPalletInstance],\n    getAssetMin: [Function: getAssetMin],\n    hasOnlyAddress: [Function: hasOnlyAddress],\n  },\n  min: _AssetAmount {\n    key: \"dot\",\n    originSymbol: \"DOT\",\n    address: \"0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080\",\n    decimals: 10,\n    ids: {\n      id: \"42259045809535163221576417993425387648\",\n    },\n    min: undefined,\n    symbol: undefined,\n    amount: 84005160n,\n    isSame: [Function: isSame],\n    isEqual: [Function: isEqual],\n    copyWith: [Function: copyWith],\n    convertDecimals: [Function: convertDecimals],\n    toBig: [Function: toBig],\n    toBigDecimal: [Function: toBigDecimal],\n    toDecimal: [Function: toDecimal],\n    getSymbol: [Function: getSymbol],\n    getAssetId: [Function: getAssetId],\n    getBalanceAssetId: [Function: getBalanceAssetId],\n    getMinAssetId: [Function: getMinAssetId],\n    getAssetPalletInstance: [Function: getAssetPalletInstance],\n    getAssetMin: [Function: getAssetMin],\n    hasOnlyAddress: [Function: hasOnlyAddress],\n  },\n  source: {\n    balance: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 29159392703n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    chain: _Parachain {\n      assets: Map(1) {\n        \"dot\": [Object ...],\n      },\n      ecosystem: \"polkadot\",\n      explorer: undefined,\n      isTestChain: false,\n      key: \"polkadot\",\n      name: \"Polkadot\",\n      wh: undefined,\n      checkSovereignAccountBalances: true,\n      genesisHash: \"0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3\",\n      isRelay: true,\n      parachainId: 0,\n      ss58Format: 0,\n      usesChainDecimals: false,\n      weight: undefined,\n      ws: [ \"wss://polkadot-rpc.dwellir.com\", \"wss://polkadot.api.onfinality.io/public-ws\",\n        \"wss://rpc.polkadot.io/\"\n      ],\n      nativeAsset: [Getter],\n      isEqual: [Function: isEqual],\n      getChainAsset: [Function: getChainAsset],\n      getWormholeName: [Function: getWormholeName],\n    },\n    destinationFee: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 84005160n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    destinationFeeBalance: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 29159392703n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    existentialDeposit: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 10000000000n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    fee: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 644912800n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    feeBalance: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 29159392703n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    max: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 18514479903n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    min: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 0n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n  },\n  transfer: [AsyncFunction: transfer],\n}\n</code></pre> <p>As you may have noticed in the example response, the transfer data contains information on the asset, source, and destination chain. In addition, a couple of functions have been exposed:</p> <ul> <li><code>transfer</code> - transfers a given amount of the asset from the source chain to the destination chain</li> <li><code>getEstimate</code> - returns an estimated amount of the asset that will be received on the destination chain, less any destination fees</li> </ul>"},{"location":"example-usage/xcm/#transfer-an-asset","title":"Transfer an Asset","text":"<p>Now that you've built the transfer data, you can transfer the asset from the source chain to the destination chain. To do so, you can use the <code>transfer</code> function, but first, you'll need to specify an amount to send. You can specify the amount in integer or decimal format. For example, if you wanted to send 0.1 DOT, you could use <code>1000000000n</code> or <code>'0.1'</code>. You can use asset conversion methods, like <code>toDecimal</code> to convert the asset to decimal format. You'll also need to specify the signer you're using for the transfer.</p> <p>For this example, you can transfer twice the minimum amount required of DOT:</p> <pre><code>...\n\nconst amount = +transferData.min.toDecimal() * 2;\nconsole.log(\n  `Sending from ${transferData.source.chain.name} amount: ${amount}`,\n);\nconst hash = await transferData.transfer(amount, {\n  polkadotSigner: pair,\n});\nconsole.log(`${transferData.source.chain.name} tx hash: ${hash}`);\n</code></pre> <p>As the above snippet shows, the <code>transfer</code> function returns a transaction hash on the source chain.</p> <p>Note</p> <p>For more information on the parameters and returned data for <code>transfer</code>, please refer to the XCM SDK Reference.</p>"},{"location":"example-usage/xcm/#get-estimate","title":"Get an Estimate of the Asset to Be Received on the Destination Chain","text":"<p>When you send an XCM message, you typically pay fees on the destination chain to execute the XCM instructions. Before you transfer the asset, you can use the <code>getEstimate</code> function to calculate an estimated amount of the asset that will be received on the destination chain minus any fees.</p> <p>The <code>getEstimate</code> function is tied to a specific transfer request as it is based on the asset being transferred and the destination chain fees, so you'll need to create the transfer data first.</p> <p>You must provide the amount to be transferred to the <code>getEstimate</code> function. In the following example, you'll get the estimated amount of DOT that will be received on Moonbeam when 0.1 DOT is transferred. You can specify the amount in integer (<code>1000000000n</code>) or decimal (<code>'0.1'</code>) format.</p> <pre><code>...\n\nconst amount = '0.1';\nconst estimatedAmount = transferData.getEstimate(amount);\n\nconsole.log(\n  `The estimated amount of ${\n    transferData.source.balance.getSymbol()\n  } to be received on ${\n    transferData.destination.chain.name\n  } is: ${estimatedAmount.toDecimal()} ${transferData.destination.balance.getSymbol()}`,\n);\n</code></pre> <p>The <code>getEstimate</code> function returns the estimated amount along with information on the asset being transferred.</p> Example response <pre><code>// estimatedAmount\n_AssetAmount {\n  key: \"dot\",\n  originSymbol: \"DOT\",\n  address: undefined,\n  decimals: 10,\n  ids: undefined,\n  min: undefined,\n  symbol: undefined,\n  amount: 915994840n,\n  isSame: [Function: isSame],\n  isEqual: [Function: isEqual],\n  copyWith: [Function: copyWith],\n  convertDecimals: [Function: convertDecimals],\n  toBig: [Function: toBig],\n  toBigDecimal: [Function: toBigDecimal],\n  toDecimal: [Function: toDecimal],\n  getSymbol: [Function: getSymbol],\n  getAssetId: [Function: getAssetId],\n  getBalanceAssetId: [Function: getBalanceAssetId],\n  getMinAssetId: [Function: getMinAssetId],\n  getAssetPalletInstance: [Function: getAssetPalletInstance],\n  getAssetMin: [Function: getAssetMin],\n  hasOnlyAddress: [Function: hasOnlyAddress],\n}\n</code></pre>"},{"location":"example-usage/xcm/#transfer-min-max-amounts","title":"Get Transfer Minimum and Maximum Amounts","text":"<p>You can use transfer data to retrieve the minimum and maximum amount of an asset that can be transferred. To do so, you'll access the <code>min</code> and <code>max</code> properties of the asset being transferred:</p> MinimumMaximum <pre><code>...\n\nconst amount = transferData.min.toDecimal();\nconst symbol = transferData.min.getSymbol();\n\nconsole.log(`You can send min: ${amount} ${symbol}`);\n</code></pre> <pre><code>...\n\nconst amount = transferData.max.toDecimal();\nconst symbol = transferData.max.getSymbol();\n\nconsole.log(`You can send max: ${amount} ${symbol}`);\n</code></pre> <p>The <code>min</code> and <code>max</code> properties return the minimum and maximum amount of the asset that can be transferred, along with information on the asset. If the source account does not hold a balance of the chosen asset, the <code>data.max</code> amount will be <code>0n</code>.</p> Example response <pre><code>    // min\n_AssetAmount {\n  key: \"dot\",\n  originSymbol: \"DOT\",\n  address: \"0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080\",\n  decimals: 10,\n  ids: {\n    id: \"42259045809535163221576417993425387648\",\n  },\n  min: undefined,\n  symbol: undefined,\n  amount: 84005160n,\n  isSame: [Function: isSame],\n  isEqual: [Function: isEqual],\n  copyWith: [Function: copyWith],\n  convertDecimals: [Function: convertDecimals],\n  toBig: [Function: toBig],\n  toBigDecimal: [Function: toBigDecimal],\n  toDecimal: [Function: toDecimal],\n  getSymbol: [Function: getSymbol],\n  getAssetId: [Function: getAssetId],\n  getBalanceAssetId: [Function: getBalanceAssetId],\n  getMinAssetId: [Function: getMinAssetId],\n  getAssetPalletInstance: [Function: getAssetPalletInstance],\n  getAssetMin: [Function: getAssetMin],\n  hasOnlyAddress: [Function: hasOnlyAddress],\n},\n// max\n_AssetAmount {\n  key: \"dot\",\n  originSymbol: \"DOT\",\n  address: undefined,\n  decimals: 10,\n  ids: undefined,\n  min: undefined,\n  symbol: undefined,\n  amount: 18514479903n,\n  isSame: [Function: isSame],\n  isEqual: [Function: isEqual],\n  copyWith: [Function: copyWith],\n  convertDecimals: [Function: convertDecimals],\n  toBig: [Function: toBig],\n  toBigDecimal: [Function: toBigDecimal],\n  toDecimal: [Function: toDecimal],\n  getSymbol: [Function: getSymbol],\n  getAssetId: [Function: getAssetId],\n  getBalanceAssetId: [Function: getBalanceAssetId],\n  getMinAssetId: [Function: getMinAssetId],\n  getAssetPalletInstance: [Function: getAssetPalletInstance],\n  getAssetMin: [Function: getAssetMin],\n  hasOnlyAddress: [Function: hasOnlyAddress],\n}\n</code></pre> <p>Note</p> <p>For more information on assets and asset amounts, please refer to the XCM SDK Reference.</p>"},{"location":"example-usage/xcm/#get-transfer-fees","title":"Get Transfer Fees","text":"<p>The transfer data provides information on transfer fees for the source and destination chains. You can retrieve the fees using the following snippet:</p> <pre><code>...\nconst sourceChain = transferData.source.chain.name;\nconst sourceFee = transferData.source.fee;\n\nconst destinationChain = transferData.destination.chain.name;\nconst destinationFee = transferData.destination.fee;\n\nconsole.log(\n  `You will pay ${sourceFee.toDecimal()} ${sourceFee.getSymbol()} fee on ${\n    sourceChain\n  } and ${destinationFee.toDecimal()} ${destinationFee.getSymbol()} fee on ${destinationChain}.`,\n);\n</code></pre> <p>The <code>fee</code> property returns the fees to be paid along with information on the asset.</p>   The information presented herein has been provided by third parties and is made available solely for general information purposes. Moonbeam does not endorse any project listed and described on the Moonbeam Doc Website (https://docs.moonbeam.network/). Moonbeam Foundation does not warrant the accuracy, completeness or usefulness of this information. Any reliance you place on such information is strictly at your own risk. Moonbeam Foundation disclaims all liability and responsibility arising from any reliance placed on this information by you or by anyone who may be informed of any of its contents. All statements and/or opinions expressed in these materials are solely the responsibility of the person or entity providing those materials and do not necessarily represent the opinion of Moonbeam Foundation. The information should not be construed as professional or financial advice of any kind. Advice from a suitably qualified professional should always be sought in relation to any particular matter or circumstance. The information herein may link to or integrate with other websites operated or content provided by third parties, and such other websites may link to this website. Moonbeam Foundation has no control over any such other websites or their content and will have no liability arising out of or related to such websites or their content. The existence of any such link does not constitute an endorsement of such websites, the content of the websites, or the operators of the websites. These links are being provided to you only as a convenience and you release and hold Moonbeam Foundation harmless from any and all liability arising from your use of this information or the information provided by any third-party website or service."},{"location":"reference/mrl/","title":"Moonbeam MRL SDK Reference","text":"<p>A new module, <code>@moonbeam-foundation/mrl</code>, has been added to the Moonbeam SDK to support transfers between chains from the Polkadot ecosystem and external chains from outside the Polkadot ecosystem.</p> <p>For more details about Moonbeam Routed Liquidity (MRL) itself, refer to the MRL Documentation.</p> <p>The MRL SDK simplifies the process of routing liquidity from various blockchains into the Polkadot ecosystem by providing a set of tools and functions that abstract away the complexities of cross-chain communication, by leveraging GMP, XCM, and XC-20s. </p> <p>To use it, chains are configured following an interface which contains all the necessary information to perform the transfers.</p> <p>This sdk uses the XCM-SDK types and concepts as base. In this section we'll provide a detailed reference for the most important concepts, types, interfaces and methods related to the MRL SDK.</p>"},{"location":"reference/mrl/#transfer-types","title":"Transfer types","text":"<p>To understand how to use the MRL SDK, we can identify three different types of transfers, which ultimately don't affect the way the SDK is used, but depending on the type of transfer, the logic behind each one is going to be different.</p> <p>Always refer to the MRL Documentation for a full explanation of the process, but here is a brief overview of what happens in each type of transfers, which will help you understand how the SDK works.</p>"},{"location":"reference/mrl/#from-evm-chains-to-parachains","title":"From EVM chains to parachains.","text":"<p>Here the source chain is an EVM chain and the destination chain either a Parachain or an EVM Parachain.</p> <ol> <li>A contract call is made in the source chain, which triggers the assets to be sent to Moonbeam (moon chain). This process is done in this sdk by leveraging a GMP provider. Currently the only one supported is Wormhole.</li> <li>Next, to complete the transfer in Moonbeam, it must be executed, either manually or automatically by a relayer from the GMP provider. This execution consists of calling the GMP precompile, which triggers the next step.</li> <li>An XCM message is sent from Moonbeam to the destination chain, containing the assets that were sent from the source chain.</li> </ol>"},{"location":"reference/mrl/#from-parachains-to-evm-chains","title":"From parachains to EVM chains.","text":"<p>Here the source chain is a Parachain or an EVM Parachain and the destination chain an EVM chain.</p> <ol> <li> <p>An XCM message is sent from the source chain to Moonbeam, this message is a batch call containing the following information:</p> <ul> <li>A 'transfer assets' message, containing the asset that the user wants to transfer, plus the fees necessary to complete the transfer in Moonbeam, if any.</li> <li>A 'remote execution' message, which will be executed in Moonbeam.</li> <li>The assets are sent to the computed origin account, which is an account that can only be manipulated remotely by the source address.</li> <li>Note: It is possible to only send the remote execution message, in cases where the computed origin account already has the assets necessary to complete the transfer. Refer to the transfer method for information on how to do this.</li> </ul> </li> <li> <p>Now that the computed origin account has the assets, the remote execution message is executed in Moonbeam, which will send the assets to the destination chain through a GMP provider. It is the same first step described in the From EVM chains to parachains section, but in reverse.</p> </li> <li> <p>The transaction must be executed in the destination chain, either manually or automatically by a relayer.</p> </li> </ol>"},{"location":"reference/mrl/#from-moonchain-to-evm-chains","title":"Between Moon Chain and EVM chains.","text":"<p>This is the simplest type of transfer, as it only involves moving assets between Moonbeam and an EVM chain.</p> <ol> <li>The assets are sent from the source chain to the destination chain through a GMP provider, like in the first step of the From EVM chains to parachains section.</li> <li>The transaction must be executed in the destination chain, either manually or automatically by a relayer.</li> </ol> <p>For this type of transfer there is no need for a polkadot signer.</p>"},{"location":"reference/mrl/#mrl-asset-routes","title":"MRL Asset Routes","text":"<p>These objects define the routes for transferring assets between chains. For a more detailed explanation on how to implement them, refer to the Contribute Section.</p> Example<pre><code>// MRL Asset Route for ETH from Ethereum to Moonbeam\n{\n  source: {\n    asset: weth,\n    balance: BalanceBuilder().evm().erc20(),\n    destinationFee: {\n      asset: weth,\n      balance: BalanceBuilder().evm().erc20(),\n    },\n  },\n  destination: {\n    asset: eth,\n    chain: ethereum,\n    balance: BalanceBuilder().evm().native(),\n    fee: {\n      asset: eth,\n      amount: 0,\n    },\n  },\n  mrl: {\n    isAutomaticPossible: true,\n    transfer: MrlBuilder().wormhole().wormhole().tokenTransfer(),\n    moonChain: {\n      asset: weth,\n      balance: BalanceBuilder().evm().erc20(),\n      fee: {\n        asset: glmr,\n        amount: 0,\n        balance: BalanceBuilder().substrate().system().account(),\n      },\n    },\n  },\n},\n</code></pre>"},{"location":"reference/mrl/#the-mrl-asset-route-object","title":"The Mrl Asset Route Object","text":"<p>Each asset route is an object that contains the source and destination chains, the assets to be transferred, the fees, and the extrinsic or contract calls to be executed.</p> <p>Attributes</p> <ul> <li><code>source</code> MrlSourceConfig - Contains the information about the transfer regarding the source chain</li> <li><code>destination</code> DestinationConfig - Contains the information about the transfer regarding the destination chain</li> <li><code>mrl</code> MrlConfig  - Contains the information about the transfer exclusive to MRL, like information about the transfer calls and the moon chain</li> </ul>"},{"location":"reference/mrl/#mrl-config","title":"MRL Config","text":"<p>Attributes</p> <ul> <li><code>isAutomaticPossible</code> boolean - Whether or not the automatic transfer is possible</li> <li><code>transfer</code> MrlConfigBuilder - Contains the builder for the transfer call, either an extrinsic or a contract call</li> <li><code>moonChain</code> MoonChainConfig - Contains the information about the transfer regarding the moon chain</li> </ul>"},{"location":"reference/mrl/#the-mrl-chain-routes-object","title":"The Mrl Chain Routes Object","text":"<p>This object contains the routes for a specific chain.</p> <p>Attributes</p> <ul> <li><code>chain</code> Chain  - The chain the routes are for</li> <li><code>routes</code> MrlAssetRoute[]  - The list of asset routes for the chain</li> </ul> <p>Chain routes are defined in the MRL Config files.</p>"},{"location":"reference/mrl/#transfer-data","title":"Transfer Data","text":"<p>In the process of transferring the assets, you must get the transfer data first and then use it to transfer the assets.</p>"},{"location":"reference/mrl/#the-transfer-data-object","title":"The Transfer Data Object","text":"<p>Defines the complete transfer data for transferring an asset, including asset balances, source and destination chain information, and a new concept exclusive to MRL which is the moon chain</p> <p>Attributes</p> <ul> <li><code>source</code> SourceTransferData  - The assembled source chain and address information</li> <li><code>destination</code> DestinationTransferData  - The assembled destination chain and address information</li> <li><code>moonChain</code> MoonChainTransferData  - The assembled moon chain and address information</li> <li><code>getEstimate</code> function - Gets the estimated amount of the asset that the destination address will receive</li> <li><code>isAutomaticPossible</code> boolean - Returns whether or not the automatic transfer is possible</li> <li><code>max</code> AssetAmount  - The maximum amount of the asset that can be transferred</li> <li><code>min</code> AssetAmount  - The minimum amount of the asset that can be transferred</li> <li><code>transfer</code> function  - Transfers a given amount of the asset from the source chain to the destination chain</li> </ul> Example<pre><code>// USDC from Ethereum to Hydration\n{\n    destination: {\n        chain: _Parachain {\n            assets: Map(7) {\n                \"hdx\": [Object...],\n                \"glmr\": [Object...],\n                \"dai\": [Object...],\n                \"usdcwh\": [Object...],\n                \"usdtwh\": [Object...],\n                \"wbtc\": [Object...],\n                \"weth\": [Object...],\n            },\n            ecosystem: \"polkadot\",\n            explorer: \"https://hydradx.subscan.io\",\n            isTestChain: false,\n            key: \"hydration\",\n            name: \"Hydration\",\n            wh: undefined,\n            checkSovereignAccountBalances: false,\n            genesisHash: \"0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d\",\n            isRelay: false,\n            parachainId: 2034,\n            ss58Format: 63,\n            usesChainDecimals: false,\n            weight: undefined,\n            ws: [\"wss://rpc.hydradx.cloud\", \"wss://rpc.helikon.io/hydradx\", \"wss://hydradx.paras.dotters.network\",\n                \"wss://hydradx-rpc.dwellir.com\"\n            ],\n            nativeAsset: [Getter],\n            isEqual: [Function: isEqual],\n            getChainAsset: [Function: getChainAsset],\n            getWormholeName: [Function: getWormholeName],\n        },\n        balance: _AssetAmount {\n            key: \"usdcwh\",\n            originSymbol: \"USDC.Wh\",\n            address: undefined,\n            decimals: 6,\n            ids: [Object...],\n            min: undefined,\n            symbol: undefined,\n            amount: 8271697n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        existentialDeposit: _AssetAmount {\n            key: \"hdx\",\n            originSymbol: \"HDX\",\n            address: undefined,\n            decimals: 12,\n            ids: [Object...],\n            min: undefined,\n            symbol: undefined,\n            amount: 1000000000000n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        fee: _AssetAmount {\n            key: \"usdcwh\",\n            originSymbol: \"USDC.Wh\",\n            address: undefined,\n            decimals: 6,\n            ids: [Object...],\n            min: undefined,\n            symbol: undefined,\n            amount: 4000n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        min: _AssetAmount {\n            key: \"usdcwh\",\n            originSymbol: \"USDC.Wh\",\n            address: undefined,\n            decimals: 6,\n            ids: [Object...],\n            min: undefined,\n            symbol: undefined,\n            amount: 0n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        sovereignAccountBalances: undefined,\n    },\n    getEstimate: [Function: getEstimate],\n    isAutomaticPossible: false,\n    max: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 3328424n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    min: _AssetAmount {\n        key: \"usdc\",\n        originSymbol: \"USDC\",\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6,\n        ids: undefined,\n        min: undefined,\n        symbol: undefined,\n        amount: 4000n,\n        isSame: [Function: isSame],\n        isEqual: [Function: isEqual],\n        copyWith: [Function: copyWith],\n        convertDecimals: [Function: convertDecimals],\n        toBig: [Function: toBig],\n        toBigDecimal: [Function: toBigDecimal],\n        toDecimal: [Function: toDecimal],\n        getSymbol: [Function: getSymbol],\n        getAssetId: [Function: getAssetId],\n        getBalanceAssetId: [Function: getBalanceAssetId],\n        getMinAssetId: [Function: getMinAssetId],\n        getAssetPalletInstance: [Function: getAssetPalletInstance],\n        getAssetMin: [Function: getAssetMin],\n        hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    moonChain: {\n        address: \"0x98891e5FD24Ef33A488A47101F65D212Ff6E650E\",\n        balance: _AssetAmount {\n            key: \"usdcwh\",\n            originSymbol: \"USDC.Wh\",\n            address: \"0x931715FEE2d06333043d11F658C8CE934aC61D0c\",\n            decimals: 6,\n            ids: [Object...],\n            min: undefined,\n            symbol: undefined,\n            amount: 2081768n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        feeBalance: _AssetAmount {\n            key: \"glmr\",\n            originSymbol: \"GLMR\",\n            address: \"0x0000000000000000000000000000000000000802\",\n            decimals: 18,\n            ids: [Object...],\n            min: 100000000000000000n,\n            symbol: undefined,\n            amount: 206735189943789999813n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        chain: _EvmParachain {\n            assets: Map(45) {\n                \"aca\": [Object...],\n                \"astr\": [Object...],\n                \"aseed\": [Object...],\n                \"axlusdc\": [Object...],\n                \"bnc\": [Object...],\n                \"bncs\": [Object...],\n                \"cfg\": [Object...],\n                \"dai\": [Object...],\n                \"ded\": [Object...],\n                \"dot\": [Object...],\n                \"eq\": [Object...],\n                \"eqd\": [Object...],\n                \"fil\": [Object...],\n                \"glmr\": [Object...],\n                \"hdx\": [Object...],\n                \"ibtc\": [Object...],\n                \"intr\": [Object...],\n                \"ldot\": [Object...],\n                \"manta\": [Object...],\n                \"nodl\": [Object...],\n                \"neuro\": [Object...],\n                \"peaq\": [Object...],\n                \"pha\": [Object...],\n                \"pen\": [Object...],\n                \"ring\": [Object...],\n                \"sub\": [Object...],\n                \"usdc\": [Object...],\n                \"usdcwh\": [Object...],\n                \"usdtwh\": [Object...],\n                \"usdt\": [Object...],\n                \"vastr\": [Object...],\n                \"vdot\": [Object...],\n                \"vfil\": [Object...],\n                \"vglmr\": [Object...],\n                \"vmanta\": [Object...],\n                \"wbtc\": [Object...],\n                \"weth\": [Object...],\n                \"ztg\": [Object...],\n                \"pink\": [Object...],\n                \"stink\": [Object...],\n                \"apillon\": [Object...],\n                \"wifd\": [Object...],\n                \"wbtce\": [Object...],\n                \"wethe\": [Object...],\n                \"wstethe\": [Object...],\n            },\n            ecosystem: \"polkadot\",\n            explorer: \"https://moonbeam.moonscan.io\",\n            isTestChain: false,\n            key: \"moonbeam\",\n            name: \"Moonbeam\",\n            wh: [Object...],\n            checkSovereignAccountBalances: false,\n            genesisHash: \"0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d\",\n            isRelay: false,\n            parachainId: 2004,\n            ss58Format: 1284,\n            usesChainDecimals: false,\n            weight: undefined,\n            ws: [\"wss://wss.api.moonbeam.network\"],\n            id: 1284,\n            rpc: \"https://rpc.api.moonbeam.network\",\n            isEvmSigner: true,\n            contracts: undefined,\n            getViemChain: [Function: getViemChain],\n            nativeAsset: [Getter],\n            isEqual: [Function: isEqual],\n            getChainAsset: [Function: getChainAsset],\n            getWormholeName: [Function: getWormholeName],\n        },\n        fee: _AssetAmount {\n            key: \"glmr\",\n            originSymbol: \"GLMR\",\n            address: \"0x0000000000000000000000000000000000000802\",\n            decimals: 18,\n            ids: [Object...],\n            min: 100000000000000000n,\n            symbol: undefined,\n            amount: 150000000000000000n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n    },\n    source: {\n        balance: _AssetAmount {\n            key: \"usdc\",\n            originSymbol: \"USDC\",\n            address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            decimals: 6,\n            ids: undefined,\n            min: undefined,\n            symbol: undefined,\n            amount: 3328424n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        chain: _EvmChain {\n            assets: Map(7) {\n                \"eth\": [Object...],\n                \"usdc\": [Object...],\n                \"usdt\": [Object...],\n                \"dai\": [Object...],\n                \"wbtc\": [Object...],\n                \"glmr\": [Object...],\n                \"peaq\": [Object...],\n            },\n            ecosystem: \"polkadot\",\n            explorer: \"https://etherscan.io\",\n            isTestChain: false,\n            key: \"ethereum\",\n            name: \"Ethereum\",\n            wh: [Object...],\n            id: 1,\n            rpc: \"https://ethereum-rpc.publicnode.com\",\n            getViemChain: [Function: getViemChain],\n            nativeAsset: [Getter],\n            isEqual: [Function: isEqual],\n            getChainAsset: [Function: getChainAsset],\n            getWormholeName: [Function: getWormholeName],\n        },\n        destinationFee: _AssetAmount {\n            key: \"usdc\",\n            originSymbol: \"USDC\",\n            address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            decimals: 6,\n            ids: undefined,\n            min: undefined,\n            symbol: undefined,\n            amount: 4000n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        destinationFeeBalance: _AssetAmount {\n            key: \"usdc\",\n            originSymbol: \"USDC\",\n            address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            decimals: 6,\n            ids: undefined,\n            min: undefined,\n            symbol: undefined,\n            amount: 3328424n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        moonChainFeeBalance: undefined,\n        existentialDeposit: undefined,\n        fee: _AssetAmount {\n            key: \"usdc\",\n            originSymbol: \"USDC\",\n            address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            decimals: 6,\n            ids: undefined,\n            min: undefined,\n            symbol: undefined,\n            amount: 0n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        feeBalance: _AssetAmount {\n            key: \"usdc\",\n            originSymbol: \"USDC\",\n            address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            decimals: 6,\n            ids: undefined,\n            min: undefined,\n            symbol: undefined,\n            amount: 3328424n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        max: _AssetAmount {\n            key: \"usdc\",\n            originSymbol: \"USDC\",\n            address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            decimals: 6,\n            ids: undefined,\n            min: undefined,\n            symbol: undefined,\n            amount: 3328424n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        min: _AssetAmount {\n            key: \"usdc\",\n            originSymbol: \"USDC\",\n            address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            decimals: 6,\n            ids: undefined,\n            min: undefined,\n            symbol: undefined,\n            amount: 0n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n        relayerFee: _AssetAmount {\n            key: \"usdc\",\n            originSymbol: \"USDC\",\n            address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            decimals: 6,\n            ids: undefined,\n            min: undefined,\n            symbol: undefined,\n            amount: 0n,\n            isSame: [Function: isSame],\n            isEqual: [Function: isEqual],\n            copyWith: [Function: copyWith],\n            convertDecimals: [Function: convertDecimals],\n            toBig: [Function: toBig],\n            toBigDecimal: [Function: toBigDecimal],\n            toDecimal: [Function: toDecimal],\n            getSymbol: [Function: getSymbol],\n            getAssetId: [Function: getAssetId],\n            getBalanceAssetId: [Function: getBalanceAssetId],\n            getMinAssetId: [Function: getMinAssetId],\n            getAssetPalletInstance: [Function: getAssetPalletInstance],\n            getAssetMin: [Function: getAssetMin],\n            hasOnlyAddress: [Function: hasOnlyAddress],\n        },\n    },\n    transfer: [AsyncFunction: transfer],\n}\n</code></pre>"},{"location":"reference/mrl/#the-moon-chain","title":"The Moon Chain","text":"<p>We call Moon Chain to the intermediary chain that is used to transfer the assets between the Polkadot ecosystem and the external chains. For <code>Mainnet</code> Moonbeam is the moon chain, and for <code>Testnet</code> it is <code>Moonbase Alpha</code>.</p> <ul> <li>In EVM to parachain cases the moon chain triggers the XCM transfer to the destination chain, and in the transfer data it contains the information of the sender's address in the moon chain.</li> <li>In parachain to EVM cases the moon chain receives the XCM message and executes the remote execution message, and in the transfer data it contains the information of the computed origin account.</li> <li>In Moon Chain to EVM cases is either the source or the destination of the transfer, and in the transfer data it contains the information of the sender's address.</li> </ul>"},{"location":"reference/mrl/#the-transfer-method","title":"The Transfer Method","text":"<p>Parameters</p> <ul> <li><code>amount</code> bigint | number | string - The amount of the asset to transfer</li> <li><code>isAutomatic</code> boolean - Whether or not the transfer should be automatic</li> <li><code>signers</code> Signers - The signers of the transaction</li> <li><code>statusCallback</code> function (optional) - Comes from the polkadot api. A callback function that can be passed to the signAndSend method, and will be called with the status of the transaction. Only applicable for polkadot signers, when the source chain is a parachain.</li> <li><code>sendOnlyRemoteExecution</code> boolean (optional) - When this flag is set to true, instead of sending a transfer assets message plus a remote execution message from the parachain to the moon chain, only the remote execution message is sent. Applicable only when the source chain is a parachain. This is useful when some assets are stuck in the moon chain in the computed origin account of the sender, in which case sending the assets would not be necessary from the source chain.</li> </ul> Example Usage<pre><code>import { Mrl } from '@moonbeam-network/mrl';\nimport { ethereum, hydration, usdcwh } from '@moonbeam-network/xcm-config';\nimport type { ISubmittableResult } from '@polkadot/types/types';\n\nconst isAutomatic = false;\n\nconst transferData = await Mrl()\n  .setSource(hydration)\n  .setDestination(ethereum)\n  .setAsset(usdcwh)\n  .setIsAutomatic(isAutomatic)\n  .setAddresses({\n    sourceAddress: 'INSERT_POLKADOT_ADDRESS', // pair.address,\n    destinationAddress: 'INSERT_ETHEREUM_ADDRESS', // account.address,\n  });\n\nconst statusCallback = ({ status }: ISubmittableResult) =&gt; {\n  if (status.isInBlock) {\n    console.log(\n      `Transaction sent, do something with the hash ${status.hash.toHex()}`,\n    );\n  }\n};\n\nawait transferData.transfer(\n  0.1,\n  isAutomatic,\n  {\n    polkadotSigner: INSERT_POLKADOT_SIGNER, // pair\n  },\n  statusCallback,\n);\n</code></pre>"},{"location":"reference/mrl/#the-relayer-fee","title":"The Relayer Fee","text":"<p>This is a concept that is not present in XCM, it represents the fee that the relayer charges for executing the transfer automatically. Note that if the transfer is not automatic, the relayer fee will be 0.</p> <p>In the transfer data you can find the relayer fee in the <code>relayerFee</code> attribute in the <code>source</code> object, and it is represented as an Asset Amount object.</p>"},{"location":"reference/mrl/#execute-transfer-data","title":"Execute Transfer Data","text":"<p>Apart from transferring the assets, the MRL SDK also provides a way to execute the transfer in the destination chain. This is useful when the transfer needs to be completed manually.</p> <p>Similar to the transfer data, first you need to get the execute transfer data, and then you can execute the transfer.</p>"},{"location":"reference/mrl/#the-execute-transfer-data-object","title":"The Execute Transfer Data Object","text":"<p>Defines the data needed to execute the transfer in the destination chain. Usually it is related to the bridge you're using to transfer the assets. Currently, the only bridge supported is Wormhole.</p> <p>Attributes</p> <ul> <li><code>vaa</code> VAA - The VAA of the transfer. Related to Wormhole</li> <li><code>tokenTransfer</code> TokenTransfer - The token transfer of the transfer. Related to Wormhole</li> <li><code>executeTransfer</code> function  - The function to execute the transfer</li> </ul>"},{"location":"reference/mrl/#the-execute-transfer-method","title":"The Execute Transfer Method","text":"<p>Parameters</p> <ul> <li><code>signer</code> EvmSigner - The signer to use to execute the transfer  </li> </ul> Example Usage<pre><code>  const data = await Mrl().getExecuteTransferData({\n    txId: INSERT_TX_HASH_TO_BE_EXECUTED,\n    chain: INSERT_DESTINATION_CHAIN,\n  });\n\n  await data.executeTransfer(INSERT_SIGNER_OR_WALLET_CLIENT);\n</code></pre>"},{"location":"reference/mrl/#the-mrl-method","title":"The MRL Method","text":"<p>This is the main method that you'll use to build the transfer data, and the execute transfer data. It contains a series of chained methods that you'll use to set the information about the transfer.</p> <p>Methods</p> <ul> <li><code>Mrl()</code>  - Initializes the MRL, returns all the sources supported by a given ecosystem</li> <li><code>setSource()</code> - Sets the source chain of the transfer, returns all the available destinations for this source chain</li> <li><code>setDestination()</code> - Sets the destination chain of the transfer, returns all the available assets for this source and destination chain</li> <li><code>setAsset()</code> - Sets the asset to be transferred</li> <li><code>setIsAutomatic()</code> - Sets whether the transfer is going to be completed automatically</li> <li><code>setAddresses()</code> - Sets the addresses for the transfer, returns the transfer data</li> <li><code>transfer()</code>  - Transfers the assets</li> <li><code>executeTransfer()</code>  - Executes the transfer</li> <li><code>getExecuteTransferData()</code>  - Returns the execute transfer data</li> </ul> Example Usage<pre><code>const transferData = await Mrl()\n  .setSource(INSERT_SOURCE_CHAIN)\n  .setDestination(INSERT_DESTINATION_CHAIN)\n  .setAsset(INSERT_ASSET)\n  .setIsAutomatic(INSERT_IS_AUTOMATIC)\n  .setAddresses({\n    sourceAddress: INSERT_SOURCE_ADDRESS,\n    destinationAddress: INSERT_DESTINATION_ADDRESS,\n  });\n</code></pre>"},{"location":"reference/mrl/#the-get-execute-transfer-data-method","title":"The Get Execute Transfer Data Method","text":"<p>Parameters</p> <ul> <li><code>txId</code> string - The transaction hash to be executed. This is the transaction hash of the bridge between the EVM chain and the Moon Chain</li> <li><code>chain</code> EvmChain | EvmParachain - The chain to execute the transfer on</li> </ul> Example Usage<pre><code>const data = await Mrl().getExecuteTransferData({\n  txId: INSERT_TX_HASH_TO_BE_EXECUTED,\n  chain: INSERT_DESTINATION_CHAIN,\n});\n</code></pre>"},{"location":"reference/xcm/","title":"Moonbeam XCM SDK Reference","text":"<p>The XCM SDK is based on defining an asset to transfer, then the source chain to send the asset from, and the destination chain to send the asset to, which, together, build the transfer data.</p> <p>The following sections cover the most important types, interfaces and classes you'll encounter when working with assets, chains, and transfer data.</p>"},{"location":"reference/xcm/#assets","title":"Assets","text":""},{"location":"reference/xcm/#the-asset-object","title":"The Asset Object","text":"<p>Defines an asset's key and symbol used on the asset's origin chain.</p> <p>Attributes</p> <ul> <li><code>key</code> string - Identifies an asset</li> <li><code>originSymbol</code> string - The symbol of the asset on the asset's origin chain</li> </ul>"},{"location":"reference/xcm/#the-chain-asset-object","title":"The Chain Asset Object","text":"<p>It extends the <code>Asset</code> object and adds properties related to the asset information in a specific chain.</p> <p>Attributes</p> <ul> <li><code>address</code> string - The address of the asset on the chain</li> <li><code>decimals</code> number - The number of decimals the asset has</li> <li><code>ids</code> ChainAssetIds - Different identifiers of the asset on the chain for getting balances and other information</li> <li><code>min</code> bigint - The minimum amount of the asset that can be transferred</li> <li><code>symbol</code> string - The symbol of the asset in the chain, if different from the origin symbol</li> </ul> <p>It contains methods to get the different asset's ids in the chain, and some utility methods, among which:</p> <ul> <li><code>fromAsset</code> - Creates a new <code>ChainAsset</code> object using an <code>Asset</code> object as a base</li> <li><code>copyWith</code> - Creates a new <code>ChainAsset</code> object copy, with the specified properties</li> </ul>"},{"location":"reference/xcm/#the-asset-amount-object","title":"The Asset Amount Object","text":"<p>It's the Chain Asset object with an amount.</p> <p>Attributes</p> <ul> <li><code>amount</code> bigint - The amount of the asset</li> </ul> <p>It contains methods for converting the amount to different formats, comparing amounts, and more. Some of the most important methods are:</p> <ul> <li><code>isSame</code> - Checks if the asset in question is the same as another asset, without considering the amount</li> <li><code>isEqual</code> - Checks if the asset in question is the same as another asset, and also the amount is the same</li> <li><code>copyWith</code> - Creates a new <code>AssetAmount</code> object copy, with the specified properties</li> </ul> <p>It also leverages the asset utility methods using the properties of the <code>AssetAmount</code> object.</p> Example<pre><code>// The Asset Amount object\n// USDC.Wh\n{\n  key: \"usdcwh\",\n  originSymbol: \"USDC.Wh\",\n  address: undefined,\n  decimals: 6,\n  ids: {\n    id: 21,\n  },\n  min: undefined,\n  symbol: undefined,\n  amount: 8261697n,\n  isSame: [Function: isSame],\n  isEqual: [Function: isEqual],\n  copyWith: [Function: copyWith],\n  convertDecimals: [Function: convertDecimals],\n  toBig: [Function: toBig],\n  toBigDecimal: [Function: toBigDecimal],\n  toDecimal: [Function: toDecimal],\n  getSymbol: [Function: getSymbol],\n  getAssetId: [Function: getAssetId],\n  getBalanceAssetId: [Function: getBalanceAssetId],\n  getMinAssetId: [Function: getMinAssetId],\n  getAssetPalletInstance: [Function: getAssetPalletInstance],\n  getAssetMin: [Function: getAssetMin],\n  hasOnlyAddress: [Function: hasOnlyAddress],\n}\n</code></pre>"},{"location":"reference/xcm/#chains","title":"Chains","text":""},{"location":"reference/xcm/#the-chain-object","title":"The Chain Object","text":"<p>It is the base object for all chains. Contains the information that is relevant to all types of chains.</p> <p>Attributes</p> <ul> <li><code>assets</code> Map&lt;string, ChainAsset&gt;  - A map of all assets in the chain</li> <li><code>ecosystem</code> Ecosystem - The ecosystem the chain belongs to</li> <li><code>explorer</code> string - The explorer URL for the chain</li> <li><code>isTestChain</code> boolean - Whether the chain is a test chain</li> <li><code>key</code> string - The key of the chain</li> <li><code>name</code> string - The name of the chain</li> <li><code>nativeAsset</code> Asset - The native asset of the chain</li> <li><code>wh</code> WormholeConfig - The Wormhole configuration for the chain (for MRL only)</li> </ul> <p>It has some methods that are useful for getting information about the chain or comparing chains. One method worth mentioning is:</p> <ul> <li><code>getChainAsset</code> - Returns the Chain Asset for the chain for a given asset key, Asset or Asset Amount</li> </ul>"},{"location":"reference/xcm/#the-parachain-object","title":"The Parachain Object","text":"<p>It contains information exclusive to chains in the Polkadot Ecosystem</p> <p>Example: Hydration</p> <p>Attributes</p> <ul> <li><code>parachainId</code> number - The parachain Id in the Polkadot ecosystem</li> <li><code>ss58Format</code> number - The SS58 format of the chain</li> <li><code>genesisHash</code> string - The genesis hash of the chain</li> <li><code>isRelay</code> boolean - Whether the chain is a relay chain</li> <li><code>weight</code> number - The weight of the chain</li> <li><code>ws</code> string - The WebSocket URL</li> <li><code>checkSovereignAccountBalances</code> boolean - Indicates whether a check of the sovereign account balances for the asset is required when transferring to this chain. If true, a validation is made at the moment of the transfer. Defaults to <code>false</code>. </li> <li><code>usesChainDecimals</code> boolean - Used for chains that use the chain's own decimal number for some balances calculations. This case is uncommon.</li> </ul> <p>The EVM Parachain object is similar to the Parachain object, but it contains additional properties for EVM chains.</p>"},{"location":"reference/xcm/#the-evm-parachain-object","title":"The EVM Parachain Object","text":"<p>These are parachains that use EVM signers or Ethereum type addresses.</p> <p>Example: Moonbeam</p> <p>Attributes</p> <ul> <li><code>isEvmSigner</code> boolean - Whether the chain uses an EVM signer</li> <li><code>id</code> number - The chain Id in the Ethereum ecosystem. Optional, only required if <code>isEvmSigner</code> is true</li> <li><code>rpc</code> string - The RPC URL. Optional, only required if <code>isEvmSigner</code> is true</li> <li><code>contracts</code> Contracts - Some contract addresses for the chain, used for building the transactions</li> </ul>"},{"location":"reference/xcm/#the-evm-chain-object","title":"The EVM Chain Object","text":"<p>It contains information exclusive to chains in the Ethereum Ecosystem. This type of chain is used for the MRL module</p> <p>Example: Ethereum</p> <p>Attributes</p> <ul> <li><code>id</code> number - The chain Id in the Ethereum ecosystem</li> <li><code>rpc</code> string - The RPC URL</li> </ul>"},{"location":"reference/xcm/#xcm-routes","title":"XCM Routes","text":"<p>These objects define the routes for transferring assets between chains. For a more detailed explanation on how to implement them, refer to the Contribute Section.</p> Example<pre><code>// Asset route for DOT from Polkadot to Moonbeam\n{\n  source: {\n    asset: dot,\n    balance: BalanceBuilder().substrate().system().account(),\n    fee: {\n      asset: dot,\n      balance: BalanceBuilder().substrate().system().account(),\n      extra: 0.047,\n    },\n    destinationFee: {\n      balance: BalanceBuilder().substrate().system().account(),\n    },\n  },\n  destination: {\n    asset: dot,\n    chain: moonbeam,\n    balance: BalanceBuilder().substrate().assets().account(),\n    fee: {\n      amount: FeeBuilder()\n        .xcmPaymentApi()\n        .xcmPaymentFee({ isAssetReserveChain: false }),\n      asset: dot,\n    },\n  },\n  extrinsic: ExtrinsicBuilder()\n    .xcmPallet()\n    .transferAssetsUsingTypeAndThen()\n    .here(),\n},\n</code></pre>"},{"location":"reference/xcm/#the-asset-route-object","title":"The Asset Route Object","text":"<p>An <code>AssetRoute</code> object contains the information for a route between an asset and a chain. It contains the configuration necessary for getting the transfer data of that specific asset on that chain, and in the chain that serves as the destination. </p> <p>It includes builders for the queries to get the balances, fees, which asset is used for fees when transferring, the contract calls, the extrinsics and any other configuration necessary for completing the transfer.</p> <p>Attributes</p> <ul> <li><code>source</code> SourceConfig - Contains the information about the transfer regarding the source chain</li> <li><code>destination</code> DestinationConfig - Contains the information about the transfer regarding the destination chain</li> <li><code>contract</code> ContractConfigBuilder - Contains the builder for the contract call for the transfer, in case the transfer is done through a contract, like in EVM Parachains</li> <li><code>extrinsic</code> ExtrinsicConfigBuilder - Contains the builder for the extrinsic call for the transfer, in case the transfer is done through an extrinsic, like in Parachains</li> </ul>"},{"location":"reference/xcm/#the-chain-routes-object","title":"The Chain Routes Object","text":"<p>It represents a list of Asset Routes for a given chain.</p> <p>Attributes</p> <ul> <li><code>chain</code> Chain  - The chain the routes are for</li> <li><code>routes</code> AssetRoute[]  - The list of asset routes for the chain</li> </ul> <p>Chain routes are defined in the XCM Config files.</p>"},{"location":"reference/xcm/#transfer-data","title":"Transfer Data","text":"<p>In the process of transferring the assets, you must get the transfer data first and then use it to transfer the assets.</p>"},{"location":"reference/xcm/#the-transfer-data-object","title":"The Transfer Data Object","text":"<p>Defines the complete transfer data for transferring an asset, including asset, source chain, and destination chain information, as well as a few helper functions for the transfer process.</p> <p>Attributes</p> <ul> <li><code>source</code> SourceChainTransferData  - Contains all the information about the source chain and the balances of the asset to transfer and the asset used for fees.</li> <li><code>destination</code> DestinationChainTransferData  - Contains all the information about the destination chain and the balances of the asset to transfer and the asset used for fees.</li> <li><code>getEstimate</code> function - Returns the estimated amount of the asset to transfer to the destination chain</li> <li><code>max</code> AssetAmount - The maximum amount of the asset that can be transferred</li> <li><code>min</code> AssetAmount - The minimum amount of the asset that can be transferred</li> <li><code>transfer</code> function  - The function to transfer the asset to the destination chain</li> </ul> Example<pre><code>// Send DOT from Polkadot to Moonbeam\n// transfer data\n{\n  destination: {\n    chain: _EvmParachain {\n      assets: Map(45) {\n        \"aca\": [Object ...],\n        \"astr\": [Object ...],\n        \"aseed\": [Object ...],\n        \"axlusdc\": [Object ...],\n        \"bnc\": [Object ...],\n        \"bncs\": [Object ...],\n        \"cfg\": [Object ...],\n        \"dai\": [Object ...],\n        \"ded\": [Object ...],\n        \"dot\": [Object ...],\n        \"eq\": [Object ...],\n        \"eqd\": [Object ...],\n        \"fil\": [Object ...],\n        \"glmr\": [Object ...],\n        \"hdx\": [Object ...],\n        \"ibtc\": [Object ...],\n        \"intr\": [Object ...],\n        \"ldot\": [Object ...],\n        \"manta\": [Object ...],\n        \"nodl\": [Object ...],\n        \"neuro\": [Object ...],\n        \"peaq\": [Object ...],\n        \"pha\": [Object ...],\n        \"pen\": [Object ...],\n        \"ring\": [Object ...],\n        \"sub\": [Object ...],\n        \"usdc\": [Object ...],\n        \"usdcwh\": [Object ...],\n        \"usdtwh\": [Object ...],\n        \"usdt\": [Object ...],\n        \"vastr\": [Object ...],\n        \"vdot\": [Object ...],\n        \"vfil\": [Object ...],\n        \"vglmr\": [Object ...],\n        \"vmanta\": [Object ...],\n        \"wbtc\": [Object ...],\n        \"weth\": [Object ...],\n        \"ztg\": [Object ...],\n        \"pink\": [Object ...],\n        \"stink\": [Object ...],\n        \"apillon\": [Object ...],\n        \"wifd\": [Object ...],\n        \"wbtce\": [Object ...],\n        \"wethe\": [Object ...],\n        \"wstethe\": [Object ...],\n      },\n      ecosystem: \"polkadot\",\n      explorer: \"https://moonbeam.moonscan.io\",\n      isTestChain: false,\n      key: \"moonbeam\",\n      name: \"Moonbeam\",\n      wh: [Object ...],\n      checkSovereignAccountBalances: false,\n      genesisHash: \"0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d\",\n      isRelay: false,\n      parachainId: 2004,\n      ss58Format: 1284,\n      usesChainDecimals: false,\n      weight: undefined,\n      ws: [ \"wss://wss.api.moonbeam.network\" ],\n      id: 1284,\n      rpc: \"https://rpc.api.moonbeam.network\",\n      isEvmSigner: true,\n      contracts: undefined,\n      getViemChain: [Function: getViemChain],\n      nativeAsset: [Getter],\n      isEqual: [Function: isEqual],\n      getChainAsset: [Function: getChainAsset],\n      getWormholeName: [Function: getWormholeName],\n    },\n    balance: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: \"0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080\",\n      decimals: 10,\n      ids: [Object ...],\n      min: undefined,\n      symbol: undefined,\n      amount: 17683227925n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    existentialDeposit: _AssetAmount {\n      key: \"glmr\",\n      originSymbol: \"GLMR\",\n      address: \"0x0000000000000000000000000000000000000802\",\n      decimals: 18,\n      ids: [Object ...],\n      min: 100000000000000000n,\n      symbol: undefined,\n      amount: 0n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    fee: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: \"0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080\",\n      decimals: 10,\n      ids: [Object ...],\n      min: undefined,\n      symbol: undefined,\n      amount: 84005160n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    min: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: \"0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080\",\n      decimals: 10,\n      ids: [Object ...],\n      min: undefined,\n      symbol: undefined,\n      amount: 0n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    sovereignAccountBalances: undefined,\n  },\n  getEstimate: [Function: getEstimate],\n  max: _AssetAmount {\n    key: \"dot\",\n    originSymbol: \"DOT\",\n    address: undefined,\n    decimals: 10,\n    ids: undefined,\n    min: undefined,\n    symbol: undefined,\n    amount: 18514479903n,\n    isSame: [Function: isSame],\n    isEqual: [Function: isEqual],\n    copyWith: [Function: copyWith],\n    convertDecimals: [Function: convertDecimals],\n    toBig: [Function: toBig],\n    toBigDecimal: [Function: toBigDecimal],\n    toDecimal: [Function: toDecimal],\n    getSymbol: [Function: getSymbol],\n    getAssetId: [Function: getAssetId],\n    getBalanceAssetId: [Function: getBalanceAssetId],\n    getMinAssetId: [Function: getMinAssetId],\n    getAssetPalletInstance: [Function: getAssetPalletInstance],\n    getAssetMin: [Function: getAssetMin],\n    hasOnlyAddress: [Function: hasOnlyAddress],\n  },\n  min: _AssetAmount {\n    key: \"dot\",\n    originSymbol: \"DOT\",\n    address: \"0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080\",\n    decimals: 10,\n    ids: {\n      id: \"42259045809535163221576417993425387648\",\n    },\n    min: undefined,\n    symbol: undefined,\n    amount: 84005160n,\n    isSame: [Function: isSame],\n    isEqual: [Function: isEqual],\n    copyWith: [Function: copyWith],\n    convertDecimals: [Function: convertDecimals],\n    toBig: [Function: toBig],\n    toBigDecimal: [Function: toBigDecimal],\n    toDecimal: [Function: toDecimal],\n    getSymbol: [Function: getSymbol],\n    getAssetId: [Function: getAssetId],\n    getBalanceAssetId: [Function: getBalanceAssetId],\n    getMinAssetId: [Function: getMinAssetId],\n    getAssetPalletInstance: [Function: getAssetPalletInstance],\n    getAssetMin: [Function: getAssetMin],\n    hasOnlyAddress: [Function: hasOnlyAddress],\n  },\n  source: {\n    balance: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 29159392703n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    chain: _Parachain {\n      assets: Map(1) {\n        \"dot\": [Object ...],\n      },\n      ecosystem: \"polkadot\",\n      explorer: undefined,\n      isTestChain: false,\n      key: \"polkadot\",\n      name: \"Polkadot\",\n      wh: undefined,\n      checkSovereignAccountBalances: true,\n      genesisHash: \"0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3\",\n      isRelay: true,\n      parachainId: 0,\n      ss58Format: 0,\n      usesChainDecimals: false,\n      weight: undefined,\n      ws: [ \"wss://polkadot-rpc.dwellir.com\", \"wss://polkadot.api.onfinality.io/public-ws\",\n        \"wss://rpc.polkadot.io/\"\n      ],\n      nativeAsset: [Getter],\n      isEqual: [Function: isEqual],\n      getChainAsset: [Function: getChainAsset],\n      getWormholeName: [Function: getWormholeName],\n    },\n    destinationFee: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 84005160n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    destinationFeeBalance: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 29159392703n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    existentialDeposit: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 10000000000n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    fee: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 644912800n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    feeBalance: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 29159392703n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    max: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 18514479903n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n    min: _AssetAmount {\n      key: \"dot\",\n      originSymbol: \"DOT\",\n      address: undefined,\n      decimals: 10,\n      ids: undefined,\n      min: undefined,\n      symbol: undefined,\n      amount: 0n,\n      isSame: [Function: isSame],\n      isEqual: [Function: isEqual],\n      copyWith: [Function: copyWith],\n      convertDecimals: [Function: convertDecimals],\n      toBig: [Function: toBig],\n      toBigDecimal: [Function: toBigDecimal],\n      toDecimal: [Function: toDecimal],\n      getSymbol: [Function: getSymbol],\n      getAssetId: [Function: getAssetId],\n      getBalanceAssetId: [Function: getBalanceAssetId],\n      getMinAssetId: [Function: getMinAssetId],\n      getAssetPalletInstance: [Function: getAssetPalletInstance],\n      getAssetMin: [Function: getAssetMin],\n      hasOnlyAddress: [Function: hasOnlyAddress],\n    },\n  },\n  transfer: [AsyncFunction: transfer],\n}\n</code></pre>"},{"location":"reference/xcm/#the-transfer-method","title":"The Transfer Method","text":"<p><code>transfer()</code> - This is the method that actually sends the asset to the destination chain. To use it, you must first build the transfer data with the Sdk method.</p> <p>Parameters</p> <ul> <li><code>amount</code> number | string | bigint - The amount of the asset to transfer</li> <li><code>signers</code> Signers - The signers to use for the transfer</li> </ul> <p>Returns</p> <ul> <li><code>Promise&lt;string&gt;</code> - The transaction hash of the transfer on the source chain</li> </ul> Example Usage<pre><code>const data = await Sdk()\n  .setAsset(INSERT_ASSET)\n  .setSource(INSERT_SOURCE_CHAIN)\n  .setDestination(INSERT_DESTINATION_CHAIN)\n  .setAddresses({\n    sourceAddress: INSERT_SOURCE_ADDRESS,\n    destinationAddress: INSERT_DESTINATION_ADDRESS,\n  });\n\nconst txHash = await data.transfer(INSERT_AMOUNT, {\n  polkadotSigner: INSERT_POLKADOT_SIGNER,\n  evmSigner: INSERT_EVM_SIGNER_OR_WALLET_CLIENT,\n});\n</code></pre>"},{"location":"reference/xcm/#the-sdk-method","title":"The SDK Method","text":"<p>This is the main method that you'll use to build the transfer data. It contains a series of chained methods that you'll use to set the information about the transfer.</p> <p>Methods</p> <ul> <li><code>Sdk()</code>  - Initializes the SDK, returns all the assets supported by a given ecosystem</li> <li><code>setAsset()</code> - Sets the asset to be transferred, returns all the available sources for the asset</li> <li><code>setSource()</code> - Sets the source chain to transfer the asset from, returns all the available destinations for the asset from the source chain</li> <li><code>setDestination()</code> - Sets the destination chain to transfer the asset to</li> <li><code>setAddresses()</code> - Sets the addresses for the transfer, returns the transfer data</li> </ul> Example Usage<pre><code>const data = await Sdk()\n  .setAsset(INSERT_ASSET)\n  .setSource(INSERT_SOURCE_CHAIN)\n  .setDestination(INSERT_DESTINATION_CHAIN)\n  .setAddresses({\n    sourceAddress: INSERT_SOURCE_ADDRESS,\n    destinationAddress: INSERT_DESTINATION_ADDRESS,\n  });\n</code></pre>"},{"location":"reference/xcm/#asset-utility-methods","title":"Asset Utility Methods","text":""},{"location":"reference/xcm/#the-to-decimal-method","title":"The To Decimal Method","text":"<p><code>toDecimal()</code> - Converts an asset amount to a decimal string. Useful for handling amounts in Wei and presenting them in a more readable format.</p> <p>Parameters</p> <ul> <li><code>number</code> bigint | number | string - The amount to convert to decimal format</li> <li><code>decimals</code> number - The number of decimals the asset uses</li> <li><code>maxDecimal</code> number - The maximum number of decimals to display in the string, defaults to <code>6</code></li> <li><code>roundType</code> RoundingMode - The rounding mode to use, defaults to <code>Big.roundDown</code></li> </ul> <p>Returns</p> <ul> <li><code>string</code> - The amount in decimal format</li> </ul> Example Usage<pre><code>import { toDecimal } from '@moonbeam-network/xcm-utils';\n\nconst amount = 1000000000000000000n;\nconst decimals = 18;\nconst symbol = 'GLMR';\n\nconst decimalValue = toDecimal(amount, decimals);\n\nconsole.log(`${decimalValue} ${symbol}`);\n</code></pre> Response<pre><code>1 GLMR\n</code></pre>"},{"location":"reference/xcm/#the-to-big-int-method","title":"The To Big Int Method","text":"<p><code>toBigInt()</code> - Converts an asset amount to a bigint. Useful for transforming all the amounts to the same format to perform operations.</p> <p>Parameters</p> <ul> <li><code>number</code> bigint | number | string - The amount to convert to bigint format</li> <li><code>decimals</code> number - The number of decimals the asset uses</li> </ul> <p>Returns</p> <ul> <li><code>bigint</code> - The amount in bigint format</li> </ul> Example Usage<pre><code>import { toBigInt } from '@moonbeam-network/xcm-utils';\n\nconst amount = '1';\nconst decimals = 18;\n\nconst bigintValue = toBigInt(amount, decimals);\n\nconsole.log(bigintValue);\n</code></pre> Response<pre><code>1000000000000000000n\n</code></pre>"},{"location":"reference/xcm/#the-convert-decimals-method","title":"The Convert Decimals Method","text":"<p><code>convertDecimals()</code> - Converts an asset amount to a different number of decimals. Useful when chains have different decimals for the same asset, for example when usesChainDecimals is set to <code>true</code> in a chain.</p> <p>Parameters</p> <ul> <li><code>number</code> bigint | string - The amount to convert to decimal format</li> <li><code>decimals</code> number - The number of decimals the asset uses</li> <li><code>targetDecimals</code> number - The number of decimals to convert the amount to</li> </ul> <p>Returns</p> <ul> <li><code>bigint</code> - The amount in bigint format</li> </ul> Example Usage<pre><code>import { convertDecimals } from '@moonbeam-network/xcm-utils';\n\nconst amount = 1000000000000000000n;\nconst decimals = 18;\nconst targetDecimals = 9;\n\nconst convertedAmount = convertDecimals(amount, decimals, targetDecimals);\n\nconsole.log(convertedAmount);\n</code></pre> Response<pre><code>1000000000n\n</code></pre>"}]}